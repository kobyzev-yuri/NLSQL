#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: FastAPI, Mock API, —Ä–æ–ª–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
"""

import asyncio
import httpx
import json
import time
from typing import Dict, Any

class FullPipelineTester:
    """–¢–µ—Å—Ç–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self):
        self.nl_sql_api_url = "http://localhost:8000"
        self.mock_api_url = "http://localhost:8080"
        self.web_interface_url = "http://localhost:3000"
    
    async def test_api_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö API"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
        
        try:
            async with httpx.AsyncClient() as client:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ NL‚ÜíSQL API
                response = await client.get(f"{self.nl_sql_api_url}/health", timeout=5.0)
                if response.status_code != 200:
                    print(f"‚ùå NL‚ÜíSQL API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Mock API
                response = await client.get(f"{self.mock_api_url}/health", timeout=5.0)
                if response.status_code != 200:
                    print(f"‚ùå Mock API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                    return False
                
                print("‚úÖ –í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
            return False
    
    async def test_sql_generation(self, question: str, user_id: str, role: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL"""
        print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –¥–ª—è {role} ({user_id})...")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.nl_sql_api_url}/query",
                    json={
                        "question": question,
                        "user_id": user_id,
                        "role": role,
                        "department": "IT" if role == "manager" else "Support"
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    print(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {result['sql'][:100]}...")
                    return result
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {response.status_code} - {response.text}")
                    return None
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {e}")
            return None
    
    async def test_sql_execution(self, question: str, user_id: str, role: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Å —Ä–æ–ª–µ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
        print(f"‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –¥–ª—è {role} ({user_id})...")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.nl_sql_api_url}/query/execute",
                    json={
                        "question": question,
                        "user_id": user_id,
                        "role": role,
                        "department": "IT" if role == "manager" else "Support"
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    print(f"‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω: {result['row_count']} —Å—Ç—Ä–æ–∫, –≤—Ä–µ–º—è: {result['execution_time']:.3f}—Å")
                    print(f"üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–π SQL: {result['sql'][:200]}...")
                    return result
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {response.status_code} - {response.text}")
                    return None
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {e}")
            return None
    
    async def test_role_restrictions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
        
        test_cases = [
            {
                "question": "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "user_id": "admin",
                "role": "admin",
                "expected": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
            },
            {
                "question": "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                "user_id": "manager",
                "role": "manager",
                "expected": "–¢–æ–ª—å–∫–æ IT –æ—Ç–¥–µ–ª"
            },
            {
                "question": "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "user_id": "user",
                "role": "user", 
                "expected": "–¢–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"
            }
        ]
        
        results = []
        
        for test_case in test_cases:
            print(f"\nüß™ –¢–µ—Å—Ç: {test_case['role']} - {test_case['question']}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL
            sql_result = await self.test_sql_generation(
                test_case["question"],
                test_case["user_id"], 
                test_case["role"]
            )
            
            if sql_result:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL
                exec_result = await self.test_sql_execution(
                    test_case["question"],
                    test_case["user_id"],
                    test_case["role"]
                )
                
                if exec_result:
                    results.append({
                        "test_case": test_case,
                        "sql": sql_result["sql"],
                        "executed_sql": exec_result["sql"],
                        "row_count": exec_result["row_count"],
                        "success": True
                    })
                else:
                    results.append({
                        "test_case": test_case,
                        "success": False,
                        "error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                    })
            else:
                results.append({
                    "test_case": test_case,
                    "success": False,
                    "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                })
        
        return results
    
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
        if not await self.test_api_health():
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print("\n" + "=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        results = await self.test_role_restrictions()
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        success_count = 0
        for i, result in enumerate(results, 1):
            test_case = result["test_case"]
            print(f"\n{i}. {test_case['role']} - {test_case['question']}")
            
            if result["success"]:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                print(f"   üìä –°—Ç—Ä–æ–∫: {result['row_count']}")
                print(f"   üîß SQL: {result['executed_sql'][:100]}...")
                success_count += 1
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print(f"\nüìà –ò—Ç–æ–≥–æ: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if success_count == len(results):
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ü–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FullPipelineTester()
    await tester.run_full_test()

if __name__ == "__main__":
    asyncio.run(main())
