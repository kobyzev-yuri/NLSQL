#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import sys
import os
import asyncio
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.vanna.vanna_semantic_fixed import create_semantic_vanna_client
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def debug_semantic_search():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        vanna = create_semantic_vanna_client()
        
        question = "–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
        print(f"üîç –í–æ–ø—Ä–æ—Å: {question}")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º DDL
        ddl_list = await vanna.get_related_ddl(question)
        print(f"üìã DDL ({len(ddl_list)} –∑–∞–ø–∏—Å–µ–π):")
        for i, ddl in enumerate(ddl_list):
            print(f"  {i+1}. {ddl[:200]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        docs_list = await vanna.get_related_documentation(question)
        print(f"\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ({len(docs_list)} –∑–∞–ø–∏—Å–µ–π):")
        for i, doc in enumerate(docs_list):
            print(f"  {i+1}. {doc[:200]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º Q/A –ø–∞—Ä—ã
        qa_list = await vanna.get_similar_question_sql(question)
        print(f"\n‚ùì Q/A –ø–∞—Ä—ã ({len(qa_list)} –∑–∞–ø–∏—Å–µ–π):")
        for i, qa in enumerate(qa_list):
            print(f"  {i+1}. {qa[:200]}...")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

if __name__ == "__main__":
    asyncio.run(debug_semantic_search())
