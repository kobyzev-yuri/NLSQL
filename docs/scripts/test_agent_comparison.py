#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞
–¥–æ –∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ –ë–î
"""

import os
import sys
import logging
from pathlib import Path
from typing import Dict, List, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from src.vanna.vanna_pgvector_native import DocStructureVannaNative

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AgentTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.vanna = DocStructureVannaNative(config=config)
        
    def test_questions(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        test_questions = [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤",
            "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º",
            "–ü–æ—Ä—É—á–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            "–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª–∞–º",
            "–ü–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            "–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º",
            "–ü–æ–∫–∞–∂–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            "–ö–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ equsers?",
            "–°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ—Ä—É—á–µ–Ω–∏—è"
        ]
        
        results = {}
        
        for question in test_questions:
            try:
                logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {question}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL
                sql = self.vanna.generate_sql(question)
                
                results[question] = {
                    "sql": sql,
                    "success": sql is not None and sql.strip() != "",
                    "error": None
                }
                
                if results[question]["success"]:
                    logger.info(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {sql[:100]}...")
                else:
                    logger.warning(f"‚ö†Ô∏è SQL –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {question}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question}': {e}")
                results[question] = {
                    "sql": None,
                    "success": False,
                    "error": str(e)
                }
        
        return results
    
    def analyze_results(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        total_questions = len(results)
        successful = sum(1 for r in results.values() if r["success"])
        failed = total_questions - successful
        
        success_rate = (successful / total_questions) * 100 if total_questions > 0 else 0
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        simple_questions = ["–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤", "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã"]
        complex_questions = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º", "–ü–æ—Ä—É—á–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏", "–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"]
        schema_questions = ["–ü–æ–∫–∞–∂–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "–ö–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ equsers?", "–°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏"]
        
        simple_success = sum(1 for q in simple_questions if results.get(q, {}).get("success", False))
        complex_success = sum(1 for q in complex_questions if results.get(q, {}).get("success", False))
        schema_success = sum(1 for q in schema_questions if results.get(q, {}).get("success", False))
        
        analysis = {
            "total_questions": total_questions,
            "successful": successful,
            "failed": failed,
            "success_rate": success_rate,
            "simple_questions": {
                "total": len(simple_questions),
                "successful": simple_success,
                "success_rate": (simple_success / len(simple_questions)) * 100 if simple_questions else 0
            },
            "complex_questions": {
                "total": len(complex_questions),
                "successful": complex_success,
                "success_rate": (complex_success / len(complex_questions)) * 100 if complex_questions else 0
            },
            "schema_questions": {
                "total": len(schema_questions),
                "successful": schema_success,
                "success_rate": (schema_success / len(schema_questions)) * 100 if schema_questions else 0
            }
        }
        
        return analysis
    
    def save_results(self, results: Dict[str, Any], analysis: Dict[str, Any], filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        output = {
            "timestamp": str(Path(__file__).stat().st_mtime),
            "analysis": analysis,
            "detailed_results": results
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(output, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = Path("config.json")
    if config_file.exists():
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
    else:
        config = {
            "vanna_model": "gpt-4o",
            "vector_db": "pgvector",
            "training_data_dir": "training_data",
            "api_key": "your-api-key",
            "base_url": "https://api.proxyapi.ru/openai/v1",
            "model": "gpt-4o"
        }
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = AgentTester(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...")
    results = tester.test_questions()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analysis = tester.analyze_results(results)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    logger.info(f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {analysis['total_questions']}")
    logger.info(f"–£—Å–ø–µ—à–Ω—ã—Ö: {analysis['successful']}")
    logger.info(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {analysis['failed']}")
    logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {analysis['success_rate']:.1f}%")
    
    logger.info("üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
    logger.info(f"–ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {analysis['simple_questions']['success_rate']:.1f}%")
    logger.info(f"–°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {analysis['complex_questions']['success_rate']:.1f}%")
    logger.info(f"–í–æ–ø—Ä–æ—Å—ã –ø–æ —Å—Ö–µ–º–µ: {analysis['schema_questions']['success_rate']:.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.save_results(results, analysis, "test_results_after_schema_training.json")
    
    logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
