#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import json
import pandas as pd
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('src')
sys.path.append('.')

from src.vanna.vanna_pgvector_native import DocStructureVannaNative

def check_tables_in_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        vanna = DocStructureVannaNative()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ
        tables_query = """
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_type = 'BASE TABLE'
        ORDER BY table_name
        """
        
        df = vanna.run_sql(tables_query)
        existing_tables = df['table_name'].tolist()
        
        print("üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for table in existing_tables:
            print(f"   ‚úÖ {table}")
        
        return existing_tables
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def check_tables_in_doc_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ DocStructureSchema"""
    try:
        schema_data = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º EQDocTypes.json
        with open('DocStructureSchema/EQDocTypes.json', 'r', encoding='utf-8') as f:
            doc_types = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ DocStructureSchema
        schema_tables = set()
        for doc_type in doc_types:
            tablename = doc_type.get('tablename')
            if tablename:
                schema_tables.add(tablename)
        
        print("\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ DocStructureSchema:")
        for table in sorted(schema_tables):
            print(f"   üìÑ {table}")
        
        return list(schema_tables)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DocStructureSchema: {e}")
        return []

def find_missing_tables():
    """–ù–∞—Ö–æ–¥–∏—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_tables = check_tables_in_database()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ DocStructureSchema
    schema_tables = check_tables_in_doc_structure()
    
    if not db_tables or not schema_tables:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    missing_tables = []
    for table in schema_tables:
        if table not in db_tables:
            missing_tables.append(table)
    
    print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã ({len(missing_tables)}):")
    for table in missing_tables:
        print(f"   üî¥ {table}")
    
    # –ù–∞—Ö–æ–¥–∏–º –ª–∏—à–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ
    extra_tables = []
    for table in db_tables:
        if table not in schema_tables:
            extra_tables.append(table)
    
    print(f"\n‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ ({len(extra_tables)}):")
    for table in extra_tables:
        print(f"   üü¢ {table}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    requested_tables = [
        "tbl_countries",
        "tbl_swift", 
        "tbl_bik",
        "tbl_currencies",
        "tbl_contract_types",
        "tbl_assignment_types",
        "tbl_payment_statuses"
    ]
    
    print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
    for table in requested_tables:
        if table in db_tables:
            print(f"   ‚úÖ {table} - –ï–°–¢–¨ –≤ –±–∞–∑–µ")
        elif table in schema_tables:
            print(f"   üìÑ {table} - –ï–°–¢–¨ –≤ DocStructureSchema, –ù–ï–¢ –≤ –±–∞–∑–µ")
        else:
            print(f"   ‚ùå {table} - –ù–ï–¢ –Ω–∏ –≤ –±–∞–∑–µ, –Ω–∏ –≤ —Å—Ö–µ–º–µ")
    
    return missing_tables, extra_tables

def generate_ddl_requests(missing_tables):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã DDL –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü"""
    if not missing_tables:
        print("\n‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"\nüìù –ó–∞–ø—Ä–æ—Å—ã DDL –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü:")
    print("=" * 50)
    
    for table in missing_tables:
        print(f"\n-- DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table}")
        print(f"CREATE TABLE {table} (")
        print(f"    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),")
        print(f"    name VARCHAR(255) NOT NULL,")
        print(f"    description TEXT,")
        print(f"    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,")
        print(f"    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,")
        print(f"    deleted BOOLEAN DEFAULT FALSE")
        print(f");")
        print(f"")
        print(f"-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table}")
        print(f"CREATE INDEX idx_{table}_name ON {table}(name);")
        print(f"CREATE INDEX idx_{table}_deleted ON {table}(deleted);")
        print(f"")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü")
    print("=" * 50)
    
    missing_tables, extra_tables = find_missing_tables()
    
    if missing_tables:
        generate_ddl_requests(missing_tables)
        
        print(f"\nüìã –†–µ–∑—é–º–µ:")
        print(f"   –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ DocStructureSchema: {len(schema_tables) if 'schema_tables' in locals() else 0}")
        print(f"   –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(db_tables) if 'db_tables' in locals() else 0}")
        print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: {len(missing_tables)}")
        print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(extra_tables)}")
    else:
        print("\n‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ DocStructureSchema –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
