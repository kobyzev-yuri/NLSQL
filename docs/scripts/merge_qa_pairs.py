#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö Q/A –ø–∞—Ä –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
"""

import json
import os
from typing import List, Dict, Any

def load_qa_pairs(filename: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Q/A –ø–∞—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(filename):
        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        return []
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} Q/A –ø–∞—Ä –∏–∑ {filename}")
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return []

def merge_qa_pairs():
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ Q/A –ø–∞—Ä—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    print("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ Q/A –ø–∞—Ä...")
    
    all_qa_pairs = []
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SQL –ø—Ä–∏–º–µ—Ä—ã
    existing_examples = load_qa_pairs('training_data/sql_examples.json')
    for example in existing_examples:
        example['source'] = 'existing_examples'
        example['category'] = example.get('category', '–û–±—â–∏–µ')
        example['complexity'] = example.get('complexity', 2)
        example['description'] = example.get('description', '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä')
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Q/A –ø–∞—Ä—ã
    generated_qa = load_qa_pairs('generated_qa_pairs.json')
    for qa in generated_qa:
        qa['source'] = 'generated_from_schema'
        qa['category'] = qa.get('category', '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')
        qa['complexity'] = qa.get('complexity', 2)
        qa['description'] = qa.get('description', '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ö–µ–º—ã')
    
    # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä—ã
    all_qa_pairs.extend(existing_examples)
    all_qa_pairs.extend(generated_qa)
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
    for i, qa in enumerate(all_qa_pairs):
        qa['id'] = i + 1
    
    # 5. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for qa in all_qa_pairs:
        category = qa.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if category not in categories:
            categories[category] = []
        categories[category].append(qa)
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    output_filename = 'merged_qa_pairs.json'
    with open(output_filename, 'w', encoding='utf-8') as f:
        json.dump(all_qa_pairs, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_qa_pairs)} Q/A –ø–∞—Ä –≤ {output_filename}")
    
    # 7. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, pairs in categories.items():
        print(f"   {category}: {len(pairs)} –ø–∞—Ä")
    
    print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ Q/A –ø–∞—Ä: {len(all_qa_pairs)}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(set(qa['source'] for qa in all_qa_pairs))}")
    
    # 8. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    create_customer_template(categories)
    
    return all_qa_pairs

def create_customer_template(categories: Dict[str, List[Dict]]):
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    required_categories = {
        '–û—Ç–¥–µ–ª—ã': 5,
        '–†–æ–ª–∏': 6, 
        '–ì—Ä—É–ø–ø—ã': 4,
        '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞': 8,
        '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏': 5,
        '–°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã': 4
    }
    
    missing_categories = {}
    for category, needed_count in required_categories.items():
        current_count = len(categories.get(category, []))
        if current_count < needed_count:
            missing_categories[category] = needed_count - current_count
    
    if missing_categories:
        template = {
            "missing_categories": missing_categories,
            "templates": {}
        }
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category, needed_count in missing_categories.items():
            template["templates"][category] = []
            
            if category == '–û—Ç–¥–µ–ª—ã':
                template["templates"][category] = [
                    {
                        "question": "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –æ—Ç–¥–µ–ª—ã —Å –∏—Ö –∏–µ—Ä–∞—Ä—Ö–∏–µ–π",
                        "sql": "SELECT id, departmentname, parentid, description FROM eq_departments WHERE deleted = false ORDER BY parentid, departmentname",
                        "category": "–û—Ç–¥–µ–ª—ã",
                        "complexity": 2,
                        "description": "–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–¥–µ–ª–æ–≤"
                    },
                    {
                        "question": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–º –æ—Ç–¥–µ–ª–µ",
                        "sql": "SELECT d.departmentname, COUNT(u.id) as user_count FROM eq_departments d LEFT JOIN equsers u ON d.id = u.department AND u.deleted = false WHERE d.deleted = false GROUP BY d.id, d.departmentname",
                        "category": "–û—Ç–¥–µ–ª—ã", 
                        "complexity": 3,
                        "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª–∞–º"
                    }
                ]
            elif category == '–†–æ–ª–∏':
                template["templates"][category] = [
                    {
                        "question": "–í—Å–µ —Ä–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ",
                        "sql": "SELECT id, rolename, description FROM eqroles WHERE deleted = false",
                        "category": "–†–æ–ª–∏",
                        "complexity": 1,
                        "description": "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π"
                    },
                    {
                        "question": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é",
                        "sql": "SELECT u.login, u.email, r.rolename FROM equsers u JOIN user_roles ur ON u.id = ur.user_id JOIN eqroles r ON ur.role_id = r.id WHERE r.rolename = ? AND u.deleted = false",
                        "category": "–†–æ–ª–∏",
                        "complexity": 3,
                        "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª—å—é"
                    }
                ]
            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        with open('customer_qa_template.json', 'w', encoding='utf-8') as f:
            json.dump(template, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìã –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞: customer_qa_template.json")
        print(f"   –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {missing_categories}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö Q/A –ø–∞—Ä")
    print("=" * 40)
    
    merged_pairs = merge_qa_pairs()
    
    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ merged_qa_pairs.json")
    print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ customer_qa_template.json –∑–∞–∫–∞–∑—á–∏–∫—É")
    print("3. –î–æ–∂–¥–∏—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞")
    print("4. –û–±–Ω–æ–≤–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")

if __name__ == "__main__":
    main()
