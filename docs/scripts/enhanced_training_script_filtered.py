#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞–º
"""

import sys
import os
import json
import pandas as pd
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('src')

from vanna.vanna_pgvector_native import DocStructureVannaNative

# Whitelist –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
BUSINESS_TABLES_WHITELIST = [
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø—Ä–∞–≤–∞
    "equsers",
    "eq_departments", 
    "eqgroups",
    "eqroles",
    
    # –ë–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ
    "tbl_business_unit",
    "tbl_principal_assignment", 
    "tbl_incoming_payments",
    "tbl_accounts_document",
    "tbl_personal_account",
    
    # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    "tbl_currencies",
    "tbl_countries",
    "tbl_swift",
    "tbl_bik",
    "tbl_contract_types",
    "tbl_assignment_types",
    "tbl_payment_statuses"
]

class FilteredVannaTrainer:
    def __init__(self):
        self.vanna = DocStructureVannaNative()
        self.training_stats = {
            'ddl_items': 0,
            'documentation_items': 0,
            'sql_examples': 0,
            'schema_items': 0,
            'filtered_tables': 0
        }
    
    def train_on_ddl(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ DDL —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞–º"""
        try:
            print("üìã –û–±—É—á–µ–Ω–∏–µ –Ω–∞ DDL —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
            
            with open('training_data/ddl_statements.sql', 'r', encoding='utf-8') as f:
                ddl_content = f.read()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º DDL –ø–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞–º
            filtered_ddl = self._filter_ddl_by_business_tables(ddl_content)
            
            if filtered_ddl:
                self.vanna.add_ddl(filtered_ddl)
                self.training_stats['ddl_items'] = 1
                print(f"‚úÖ DDL –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)")
            else:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ DDL –¥–ª—è –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ DDL: {e}")
    
    def train_on_documentation(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            print("üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
            
            with open('training_data/documentation.txt', 'r', encoding='utf-8') as f:
                doc_content = f.read()
            
            self.vanna.add_documentation(doc_content)
            self.training_stats['documentation_items'] = 1
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
    
    def train_on_sql_examples(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        try:
            print("üíæ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            
            with open('training_data/sql_examples.json', 'r', encoding='utf-8') as f:
                examples = json.load(f)
            
            for example in examples:
                self.vanna.add_question_sql(example['question'], example['sql'])
            
            self.training_stats['sql_examples'] = len(examples)
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(examples)} SQL –ø—Ä–∏–º–µ—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
    
    def train_on_generated_qa(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Q/A –ø–∞—Ä–∞—Ö"""
        try:
            print("ü§ñ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Q/A –ø–∞—Ä–∞—Ö...")
            
            with open('generated_qa_pairs.json', 'r', encoding='utf-8') as f:
                qa_pairs = json.load(f)
            
            for qa in qa_pairs:
                self.vanna.add_question_sql(qa['question'], qa['sql'])
            
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(qa_pairs)} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Q/A –ø–∞—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Q/A: {e}")
    
    def train_on_metadata(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üìä –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
            
            with open('training_data/metadata.json', 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_description = f"""
            –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {metadata.get('database_name', 'DocStructureSchema')}
            –û–ø–∏—Å–∞–Ω–∏–µ: {metadata.get('description', '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏')}
            –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(BUSINESS_TABLES_WHITELIST)}
            """
            
            self.vanna.add_documentation(db_description)
            self.training_stats['documentation_items'] += 1
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def train_on_database_schema_filtered(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞–º"""
        try:
            print("üóÑÔ∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î (—Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü—ã)...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –ë–î
            schema_query = """
            SELECT 
                table_name,
                column_name,
                data_type,
                is_nullable,
                column_default
            FROM information_schema.columns 
            WHERE table_schema = 'public'
            AND table_name IN ({})
            ORDER BY table_name, ordinal_position
            """.format(','.join([f"'{table}'" for table in BUSINESS_TABLES_WHITELIST]))
            
            df = self.vanna.run_sql(schema_query)
            
            if df.empty:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ –ë–î")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
            plan = self.vanna.get_training_plan_generic(df)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞–Ω –ø–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞–º
            filtered_plan = []
            for item in plan:
                if any(table in item.get('content', '') for table in BUSINESS_TABLES_WHITELIST):
                    filtered_plan.append(item)
                else:
                    self.training_stats['filtered_tables'] += 1
            
            if filtered_plan:
                # –û–±—É—á–∞–µ–º –Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
                self.vanna.train(plan=filtered_plan)
                self.training_stats['schema_items'] = len(filtered_plan)
                print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(filtered_plan)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                print(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {self.training_stats['filtered_tables']} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü")
            else:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ –ë–î: {e}")
    
    def _filter_ddl_by_business_tables(self, ddl_content: str) -> str:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç DDL –ø–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞–º"""
        lines = ddl_content.split('\n')
        filtered_lines = []
        current_table = None
        
        for line in lines:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
            if line.strip().upper().startswith('CREATE TABLE'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
                parts = line.split()
                if len(parts) >= 3:
                    table_name = parts[2].strip('`"\'')
                    current_table = table_name
            
            # –ï—Å–ª–∏ —ç—Ç–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            if current_table in BUSINESS_TABLES_WHITELIST:
                filtered_lines.append(line)
            elif line.strip() == '' or line.strip().startswith('--'):
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                filtered_lines.append(line)
            elif line.strip() == ');' and current_table in BUSINESS_TABLES_WHITELIST:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                filtered_lines.append(line)
                current_table = None
        
        return '\n'.join(filtered_lines)
    
    def train_full(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        print("üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")
        print("=" * 60)
        
        # 1. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ DDL
        self.train_on_ddl()
        
        # 2. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.train_on_documentation()
        
        # 3. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö
        self.train_on_sql_examples()
        
        # 4. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Q/A –ø–∞—Ä–∞—Ö
        self.train_on_generated_qa()
        
        # 5. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        self.train_on_metadata()
        
        # 6. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î (—Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü—ã)
        self.train_on_database_schema_filtered()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
        print(f"   DDL —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {self.training_stats['ddl_items']}")
        print(f"   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {self.training_stats['documentation_items']}")
        print(f"   SQL –ø—Ä–∏–º–µ—Ä–æ–≤: {self.training_stats['sql_examples']}")
        print(f"   –°—Ö–µ–º—ã –ë–î: {self.training_stats['schema_items']}")
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü: {self.training_stats['filtered_tables']}")
        
        print("\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üéØ –ê–≥–µ–Ω—Ç –æ–±—É—á–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞—Ö")
        print("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã:", ', '.join(BUSINESS_TABLES_WHITELIST))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    trainer = FilteredVannaTrainer()
    trainer.train_full()

if __name__ == "__main__":
    main()
