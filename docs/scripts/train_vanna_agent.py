#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è Vanna AI –∞–≥–µ–Ω—Ç–∞
"""

import os
import sys
import logging
from pathlib import Path
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from src.vanna.training_pipeline import VannaTrainingPipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–û–±—É—á–µ–Ω–∏–µ Vanna AI –∞–≥–µ–Ω—Ç–∞")
    parser.add_argument("--config", type=str, default="config.json", help="–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--step", type=str, choices=["prepare", "train", "test", "all"], 
                       default="all", help="–≠—Ç–∞–ø –ø–∞–π–ø–ª–∞–π–Ω–∞")
    parser.add_argument("--model", type=str, default="ollama/llama3.1:8b", help="–ú–æ–¥–µ–ª—å Vanna")
    parser.add_argument("--vector-db", type=str, default="chromadb", help="–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î")
    
    args = parser.parse_args()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    config = {
        "database_url": "postgresql://postgres:1234@localhost:5432/test_docstructure",
        "vanna_model": args.model,
        "vector_db": args.vector_db,
        "training_data_dir": "training_data",
        "test_questions": [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?",
            "–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º",
            "–ü–æ–∫–∞–∂–∏ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        ]
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    config_file = Path(args.config)
    if config_file.exists():
        try:
            import json
            with open(config_file, 'r', encoding='utf-8') as f:
                file_config = json.load(f)
                config.update(file_config)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = VannaTrainingPipeline(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—ã–π —ç—Ç–∞–ø
    if args.step == "prepare":
        logger.info("üìä –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        success = pipeline.prepare_training_data()
    elif args.step == "train":
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ –æ–±—É—á–µ–Ω–∏—è...")
        success = pipeline.train_agent()
    elif args.step == "test":
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        success = pipeline.test_agent()
    else:  # all
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        success = pipeline.run_full_pipeline()
    
    if success:
        print("üéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("ü§ñ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
