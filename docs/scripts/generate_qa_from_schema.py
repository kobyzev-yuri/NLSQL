#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Q/A –ø–∞—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ DocStructureSchema
"""

import json
import os
from typing import List, Dict, Any

# Whitelist –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
BUSINESS_TABLES_WHITELIST = [
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø—Ä–∞–≤–∞
    "equsers",
    "eq_departments", 
    "eqgroups",
    "eqroles",
    
    # –ë–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ
    "tbl_business_unit",
    "tbl_principal_assignment", 
    "tbl_incoming_payments",
    "tbl_accounts_document",
    "tbl_personal_account",
    
    # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    "tbl_currencies",
    "tbl_countries",
    "tbl_swift",
    "tbl_bik",
    "tbl_contract_types",
    "tbl_assignment_types",
    "tbl_payment_statuses"
]

def load_doc_structure_schema() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ DocStructureSchema"""
    schema_data = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    files_to_load = [
        "EQUsers.json",
        "EQDocTypes.json", 
        "EQDocStructure.json",
        "EQGroups.json",
        "EQRoles.json",
        "EQDepartments.json"
    ]
    
    for filename in files_to_load:
        filepath = f"DocStructureSchema/{filename}"
        if os.path.exists(filepath):
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    schema_data[filename.replace('.json', '')] = json.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {filename}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
    
    return schema_data

def generate_qa_pairs(schema_data: Dict[str, Any]) -> List[Dict[str, str]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Q/A –ø–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ DocStructureSchema"""
    qa_pairs = []
    
    # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –æ—Ç–¥–µ–ª—ã
    if "EQUsers" in schema_data:
        qa_pairs.extend([
            {
                "question": "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã",
                "sql": "SELECT id, login, email, surname, firstname, department, accessgranted FROM equsers WHERE deleted = false"
            },
            {
                "question": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è",
                "sql": "SELECT login, email, validity FROM equsers WHERE validity < CURRENT_DATE AND deleted = false"
            },
            {
                "question": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "sql": "SELECT login, email, surname, firstname FROM equsers WHERE accessgranted = true AND deleted = false"
            },
            {
                "question": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏",
                "sql": "SELECT login, email, build_in_account FROM equsers WHERE build_in_account = true AND deleted = false"
            }
        ])
    
    # 2. –û—Ç–¥–µ–ª—ã
    if "EQDepartments" in schema_data:
        qa_pairs.extend([
            {
                "question": "–í—Å–µ –æ—Ç–¥–µ–ª—ã",
                "sql": "SELECT id, departmentname, parentid, description FROM eq_departments WHERE deleted = false"
            },
            {
                "question": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º",
                "sql": "SELECT u.login, u.email, d.departmentname FROM equsers u LEFT JOIN eq_departments d ON u.department = d.id WHERE u.deleted = false"
            },
            {
                "question": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª–∞–º",
                "sql": "SELECT d.departmentname, COUNT(u.id) as user_count FROM eq_departments d LEFT JOIN equsers u ON d.id = u.department AND u.deleted = false WHERE d.deleted = false GROUP BY d.id, d.departmentname ORDER BY user_count DESC"
            }
        ])
    
    # 3. –ì—Ä—É–ø–ø—ã –∏ —Ä–æ–ª–∏
    if "EQGroups" in schema_data:
        qa_pairs.extend([
            {
                "question": "–í—Å–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "sql": "SELECT id, groupname, description FROM eqgroups WHERE deleted = false"
            }
        ])
    
    if "EQRoles" in schema_data:
        qa_pairs.extend([
            {
                "question": "–í—Å–µ —Ä–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ",
                "sql": "SELECT id, rolename, description FROM eqroles WHERE deleted = false"
            }
        ])
    
    # 4. –ë–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ (–Ω–∞ –æ—Å–Ω–æ–≤–µ EQDocTypes.json)
    if "EQDocTypes" in schema_data:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        doc_types = schema_data["EQDocTypes"]
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
        business_tables = []
        for doc_type in doc_types:
            if doc_type.get("tablename") and doc_type["tablename"] in BUSINESS_TABLES_WHITELIST:
                business_tables.append(doc_type["tablename"])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Q/A –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü
        for table in business_tables:
            if table == "tbl_business_unit":
                qa_pairs.extend([
                    {
                        "question": "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã",
                        "sql": "SELECT id, business_unit_name, inn, kpp, ogrn, phone, email FROM tbl_business_unit WHERE deleted = false"
                    },
                    {
                        "question": "–ö–ª–∏–µ–Ω—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ò–ù–ù",
                        "sql": "SELECT business_unit_name, inn, phone FROM tbl_business_unit WHERE inn = ? AND deleted = false"
                    },
                    {
                        "question": "–ö–ª–∏–µ–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º",
                        "sql": "SELECT business_unit_name, inn, phone FROM tbl_business_unit WHERE phone = ? AND deleted = false"
                    }
                ])
            
            elif table == "tbl_principal_assignment":
                qa_pairs.extend([
                    {
                        "question": "–í—Å–µ –ø–æ—Ä—É—á–µ–Ω–∏—è",
                        "sql": "SELECT assignment_number, assignment_date, amount, business_unit_id FROM tbl_principal_assignment WHERE deleted = false"
                    },
                    {
                        "question": "–ü–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
                        "sql": "SELECT assignment_number, assignment_date, amount, business_unit_id FROM tbl_principal_assignment WHERE assignment_date >= CURRENT_DATE - INTERVAL '1 month' AND deleted = false ORDER BY assignment_date DESC"
                    },
                    {
                        "question": "–ü–æ—Ä—É—á–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
                        "sql": "SELECT pa.assignment_number, pa.assignment_date, pa.amount, bu.business_unit_name FROM tbl_principal_assignment pa JOIN tbl_business_unit bu ON pa.business_unit_id = bu.id WHERE pa.deleted = false"
                    }
                ])
            
            elif table == "tbl_incoming_payments":
                qa_pairs.extend([
                    {
                        "question": "–í—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏",
                        "sql": "SELECT id, payment_date, amount, business_unit_id FROM tbl_incoming_payments WHERE deleted = false"
                    },
                    {
                        "question": "–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º",
                        "sql": "SELECT bu.business_unit_name, SUM(ip.amount) as total_payments FROM tbl_incoming_payments ip JOIN tbl_business_unit bu ON ip.business_unit_id = bu.id WHERE ip.deleted = false GROUP BY bu.id, bu.business_unit_name ORDER BY total_payments DESC"
                    },
                    {
                        "question": "–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º",
                        "sql": "SELECT DATE_TRUNC('month', payment_date) as month, SUM(amount) as total_amount FROM tbl_incoming_payments WHERE deleted = false GROUP BY DATE_TRUNC('month', payment_date) ORDER BY month DESC"
                    }
                ])
            
            elif table == "tbl_accounts_document":
                qa_pairs.extend([
                    {
                        "question": "–í—Å–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏",
                        "sql": "SELECT id, account_number, business_unit_id FROM tbl_accounts_document WHERE deleted = false"
                    }
                ])
    
    return qa_pairs

def save_qa_pairs(qa_pairs: List[Dict[str, str]], filename: str = "generated_qa_pairs.json"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç Q/A –ø–∞—Ä—ã –≤ —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(qa_pairs, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(qa_pairs)} Q/A –ø–∞—Ä –≤ {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Q/A –ø–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ DocStructureSchema")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã
    print("\nüìÅ –ó–∞–≥—Ä—É–∑–∫–∞ DocStructureSchema...")
    schema_data = load_doc_structure_schema()
    
    if not schema_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã")
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(schema_data)} —Ñ–∞–π–ª–æ–≤ —Å—Ö–µ–º—ã")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Q/A –ø–∞—Ä—ã
    print("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Q/A –ø–∞—Ä...")
    qa_pairs = generate_qa_pairs(schema_data)
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(qa_pairs)} Q/A –ø–∞—Ä")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Q/A –ø–∞—Ä:")
    for i, qa in enumerate(qa_pairs[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"\n{i+1}. –í–æ–ø—Ä–æ—Å: {qa['question']}")
        print(f"   SQL: {qa['sql']}")
    
    if len(qa_pairs) > 5:
        print(f"\n... –∏ –µ—â–µ {len(qa_pairs) - 5} –ø–∞—Ä")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    save_qa_pairs(qa_pairs)
    
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Q/A –ø–∞—Ä—ã")
    print("2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –±–∏–∑–Ω–µ—Å-—Å—Ü–µ–Ω–∞—Ä–∏–∏")
    print("3. –î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—Ä–æ—Å—ã")
    print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ Q/A –ø–∞—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞")

if __name__ == "__main__":
    main()
