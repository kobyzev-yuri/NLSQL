#!/usr/bin/env python3
"""
Vanna AI –∫–ª–∏–µ–Ω—Ç —Å pgvector –¥–ª—è DocStructureSchema
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥ Vanna AI
"""

import os
import logging
from typing import Optional, Dict, Any
from vanna.postgresql.postgresql_vector import PostgreSQL_VectorStore
from vanna.openai.openai_chat import OpenAI_Chat

logger = logging.getLogger(__name__)

class DocStructureVannaPGVector(PostgreSQL_VectorStore, OpenAI_Chat):
    """
    Vanna AI –∫–ª–∏–µ–Ω—Ç —Å pgvector –¥–ª—è DocStructureSchema
    –ù–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ Vanna AI
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vanna AI –∫–ª–∏–µ–Ω—Ç–∞ —Å pgvector
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è PostgreSQL –∏ OpenAI
        """
        if config is None:
            config = {}
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            "database_url": "postgresql://postgres:1234@localhost:5432/test_docstructure",
            "vector_table": "vanna_vectors",
            "vector_dimension": 1536,
            "distance_metric": "cosine",
            "openai_api_key": os.getenv("OPENAI_API_KEY"),
            "openai_model": "gpt-3.5-turbo"
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        config = {**default_config, **config}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã
        try:
            PostgreSQL_VectorStore.__init__(self, config=config)
            OpenAI_Chat.__init__(self, config=config)
            logger.info("‚úÖ Vanna AI —Å pgvector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def train_on_database_schema(self, db_connection=None):
        """
        –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            db_connection: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            logger.info("üéì –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º DDL —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            ddl_statements = self._get_ddl_statements()
            
            # –û–±—É—á–∞–µ–º –Ω–∞ DDL
            for ddl in ddl_statements:
                self.train(ddl=ddl)
                logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ DDL: {ddl[:100]}...")
            
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ: {e}")
            raise
    
    def train_on_documentation(self, documentation: str):
        """
        –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        
        Args:
            documentation: –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        """
        try:
            logger.info("üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
            self.train(documentation=documentation)
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            raise
    
    def train_on_sql_examples(self, examples: list):
        """
        –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö
        
        Args:
            examples: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ SQL
        """
        try:
            logger.info("üí° –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            for example in examples:
                question = example.get("question")
                sql = example.get("sql")
                if question and sql:
                    self.train(question=question, sql=sql)
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
            raise
    
    def _get_ddl_statements(self) -> list:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ DDL –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ DDL –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        """
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã DocStructureSchema
        ddl_statements = [
            """
            CREATE TABLE equsers (
                id UUID PRIMARY KEY,
                login VARCHAR(255) NOT NULL,
                email VARCHAR(255),
                surname VARCHAR(255),
                firstname VARCHAR(255),
                patronymic VARCHAR(255),
                department UUID REFERENCES eq_departments(id),
                accessgranted BOOLEAN DEFAULT true,
                build_in_account BOOLEAN DEFAULT false,
                pass VARCHAR(255),
                refresh_token TEXT,
                validity DATE,
                creationdatetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                deleted BOOLEAN DEFAULT false
            );
            """,
            
            """
            CREATE TABLE eq_departments (
                id UUID PRIMARY KEY,
                departmentname VARCHAR(255) NOT NULL,
                parentid UUID REFERENCES eq_departments(id),
                description TEXT,
                creationdatetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                deleted BOOLEAN DEFAULT false
            );
            """,
            
            """
            CREATE TABLE tbl_business_unit (
                id UUID PRIMARY KEY,
                business_unit_name VARCHAR(255) NOT NULL,
                inn VARCHAR(20),
                kpp VARCHAR(20),
                ogrn VARCHAR(20),
                legal_address TEXT,
                actual_address TEXT,
                phone VARCHAR(50),
                email VARCHAR(255),
                phone_2 VARCHAR(50),
                website VARCHAR(255),
                creationdatetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                deleted BOOLEAN DEFAULT false
            );
            """,
            
            """
            CREATE TABLE tbl_principal_assignment (
                id UUID PRIMARY KEY,
                assignment_number VARCHAR(100) NOT NULL,
                assignment_date DATE,
                amount DECIMAL(15,2),
                currency_id UUID,
                status_id UUID,
                business_unit_id UUID REFERENCES tbl_business_unit(id),
                manager_id UUID REFERENCES equsers(id),
                description TEXT,
                creationdatetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                deleted BOOLEAN DEFAULT false
            );
            """,
            
            """
            CREATE TABLE tbl_incoming_payments (
                id UUID PRIMARY KEY,
                payment_number VARCHAR(100) NOT NULL,
                payment_date DATE,
                amount DECIMAL(15,2),
                currency_id UUID,
                business_unit_id UUID REFERENCES tbl_business_unit(id),
                assignment_id UUID REFERENCES tbl_principal_assignment(id),
                description TEXT,
                creationdatetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                deleted BOOLEAN DEFAULT false
            );
            """
        ]
        
        return ddl_statements

def create_pgvector_vanna_client(database_url: str = None, openai_api_key: str = None) -> DocStructureVannaPGVector:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Vanna AI –∫–ª–∏–µ–Ω—Ç–∞ —Å pgvector
    
    Args:
        database_url: URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
        openai_api_key: API –∫–ª—é—á OpenAI
        
    Returns:
        DocStructureVannaPGVector: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    if database_url is None:
        database_url = "postgresql://postgres:1234@localhost:5432/test_docstructure"
    
    if openai_api_key is None:
        openai_api_key = os.getenv("OPENAI_API_KEY")
    
    config = {
        "database_url": database_url,
        "openai_api_key": openai_api_key,
        "vector_table": "vanna_vectors",
        "vector_dimension": 1536,
        "distance_metric": "cosine"
    }
    
    return DocStructureVannaPGVector(config=config)
