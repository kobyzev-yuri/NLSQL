"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è Vanna AI –∞–≥–µ–Ω—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—É—á–µ–Ω–∏—è
"""

import json
import os
import sys
from pathlib import Path
from typing import List, Dict, Any, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent))

from vanna.vanna_pgvector_native import DocStructureVannaNative


class EnhancedTrainingPipeline:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.vanna = DocStructureVannaNative(
            config=config,
            model=config.get('model', 'ollama/llama3.1:8b')
        )
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü—ã (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ DocStructureSchema)
        self.priority_tables = [
            "equsers",                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            "eq_departments",            # –û—Ç–¥–µ–ª—ã
            "eqgroups",                  # –ì—Ä—É–ø–ø—ã
            "eqroles",                   # –†–æ–ª–∏
            "tbl_business_unit",         # –ö–ª–∏–µ–Ω—Ç—ã
            "tbl_principal_assignment", # –ü–æ—Ä—É—á–µ–Ω–∏—è
            "tbl_incoming_payments",     # –ü–ª–∞—Ç–µ–∂–∏
            "tbl_accounts_document",     # –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            "tbl_personal_account"       # –õ–∏—á–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
        ]
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.excluded_tables = [
            "tbl_subd_admin",
            "tbl_subd_admin_log",
            "tbl_regex_patterns",
            "tbl_integration_files",
            "tbl_integration_log",
            "tbl_javascript_exception_handler",
            "tbl_notification",
            "tbl_activity_log"
        ]
    
    def extract_business_context_from_schema(self) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ DocStructureSchema"""
        
        schema_path = Path("DocStructureSchema")
        business_context = {
            "system_purpose": "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—É—á–µ–Ω–∏—è–º–∏ –∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏",
            "main_entities": {
                "users": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)",
                "clients": "–ö–ª–∏–µ–Ω—Ç—ã/–±–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü—ã",
                "assignments": "–ü–æ—Ä—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º",
                "payments": "–ü–ª–∞—Ç–µ–∂–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"
            },
            "business_flows": [
                "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—É—á–µ–Ω–∏—è ‚Üí –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ‚Üí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –ü–ª–∞—Ç–µ–∂",
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ‚Üí –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ ‚Üí –†–∞–±–æ—Ç–∞ —Å –ø–æ—Ä—É—á–µ–Ω–∏—è–º–∏"
            ],
            "priority_tables": self.priority_tables,
            "excluded_tables": self.excluded_tables
        }
        
        return business_context
    
    def train_on_filtered_schema(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö"""
        
        try:
            print("üîç –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ...")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ö–µ–º—ã
            tables_list = "', '".join(self.priority_tables)
            schema_query = f"""
            SELECT 
                table_name,
                column_name,
                data_type,
                is_nullable,
                column_default,
                character_maximum_length
            FROM information_schema.columns 
            WHERE table_schema = 'public'
            AND table_name IN ('{tables_list}')
            ORDER BY table_name, ordinal_position
            """
            
            print(f"üìä –û–±—É—á–∞–µ–º –Ω–∞ {len(self.priority_tables)} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö")
            print(f"üö´ –ò—Å–∫–ª—é—á–∞–µ–º {len(self.excluded_tables)} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü")
            
            df_schema = self.vanna.run_sql(schema_query)
            plan = self.vanna.get_training_plan_generic(df_schema)
            self.vanna.train(plan=plan)
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ: {e}")
            return False
    
    def train_on_enhanced_examples(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö SQL –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        
        try:
            print("üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            examples_file = Path("training_data/enhanced_sql_examples.json")
            if not examples_file.exists():
                print(f"‚ùå –§–∞–π–ª {examples_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(examples_file, 'r', encoding='utf-8') as f:
                examples = json.load(f)
            
            print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(examples)} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            complexity_groups = {}
            for example in examples:
                complexity = example.get('complexity', 1)
                if complexity not in complexity_groups:
                    complexity_groups[complexity] = []
                complexity_groups[complexity].append(example)
            
            # –û–±—É—á–∞–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            for complexity in sorted(complexity_groups.keys()):
                group_examples = complexity_groups[complexity]
                print(f"üéØ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {complexity} ({len(group_examples)} –ø—Ä–∏–º–µ—Ä–æ–≤)")
                
                for example in group_examples:
                    try:
                        self.vanna.train(
                            question=example['question'],
                            sql=example['sql']
                        )
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {example['question'][:50]}... - {e}")
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
            return False
    
    def train_on_business_context(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        
        try:
            print("üè¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            business_processes = [
                {
                    "process": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—É—á–µ–Ω–∏—è–º–∏",
                    "examples": [
                        "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É",
                        "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ—Ä—É—á–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ",
                        "–ù–∞–π—Ç–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É",
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ä—É—á–µ–Ω–∏–π"
                    ]
                },
                {
                    "process": "–†–∞–±–æ—Ç–∞ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏",
                    "examples": [
                        "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –º–µ—Å—è—Ü",
                        "–ù–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                        "–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º",
                        "–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"
                    ]
                },
                {
                    "process": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    "examples": [
                        "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º",
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏",
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                    ]
                }
            ]
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
            for process in business_processes:
                print(f"üìã –û–±—É—á–∞–µ–º –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ: {process['process']}")
                
                for example in process['examples']:
                    try:
                        # –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
                        context_sql = self._generate_context_sql(example, process['process'])
                        if context_sql:
                            self.vanna.train(
                                question=example,
                                sql=context_sql
                            )
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {example} - {e}")
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {e}")
            return False
    
    def _generate_context_sql(self, question: str, process: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å SQL
        if "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" in question.lower():
            return "SELECT id, login, email, surname, firstname FROM equsers WHERE deleted = false"
        elif "–ø–æ—Ä—É—á–µ–Ω–∏—è" in question.lower():
            return "SELECT assignment_number, assignment_date, amount FROM tbl_principal_assignment WHERE deleted = false"
        elif "–ø–ª–∞—Ç–µ–∂–∏" in question.lower():
            return "SELECT payment_number, payment_date, amount FROM tbl_incoming_payments WHERE deleted = false"
        elif "–æ—Ç–¥–µ–ª–∞–º" in question.lower():
            return "SELECT u.login, u.email, d.departmentname FROM equsers u LEFT JOIN eq_departments d ON u.department = d.id WHERE u.deleted = false"
        else:
            return None
    
    def train_on_tz_examples(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –¢–ó"""
        
        try:
            print("üìã –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –¢–ó...")
            
            # –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –¢–ó (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–∞—à—É —Å—Ö–µ–º—É)
            tz_examples = [
                {
                    "question": "–ü–æ–∫–∞–∂–∏ –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ê –±–æ–ª—å—à–µ 1 –º–ª–Ω —Ä—É–±–ª–µ–π",
                    "sql": """
                    SELECT pa.assignment_number, pa.assignment_date, pa.amount, 
                           bu.business_unit_name, bu.category
                    FROM tbl_principal_assignment pa
                    JOIN tbl_business_unit bu ON pa.business_unit_id = bu.id
                    WHERE pa.assignment_date < CURRENT_DATE - INTERVAL '3 days'
                    AND bu.category = 'A'
                    AND pa.amount > 1000000
                    AND pa.deleted = false
                    ORDER BY pa.amount DESC
                    """
                },
                {
                    "question": "–ò–∑ —á–µ–≥–æ —Å–¥–µ–ª–∞–Ω –ø—Ä–æ–¥—É–∫—Ç #876?",
                    "sql": """
                    SELECT product_name, material, description
                    FROM tbl_products 
                    WHERE id = 876
                    """
                },
                {
                    "question": "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–æ–≤–µ—â–∞–Ω–∏–µ –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É?",
                    "sql": """
                    SELECT meeting_date, meeting_time, description
                    FROM tbl_meetings 
                    WHERE topic ILIKE '%–º–∞—Ä–∫–µ—Ç–∏–Ω–≥%'
                    AND meeting_date >= CURRENT_DATE
                    ORDER BY meeting_date ASC
                    LIMIT 1
                    """
                }
            ]
            
            for example in tz_examples:
                try:
                    self.vanna.train(
                        question=example['question'],
                        sql=example['sql']
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ –¢–ó: {example['question']} - {e}")
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –¢–ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –¢–ó: {e}")
            return False
    
    def run_enhanced_training(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è Vanna AI –∞–≥–µ–Ω—Ç–∞")
        print("=" * 60)
        
        # 1. –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
        print("üìä –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        business_context = self.extract_business_context_from_schema()
        print(f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(business_context['priority_tables'])}")
        print(f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(business_context['excluded_tables'])}")
        
        # 2. –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ
        print("\nüîç –≠—Ç–∞–ø 2: –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ")
        if not self.train_on_filtered_schema():
            return False
        
        # 3. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
        print("\nüìö –≠—Ç–∞–ø 3: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö")
        if not self.train_on_enhanced_examples():
            return False
        
        # 4. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        print("\nüè¢ –≠—Ç–∞–ø 4: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
        if not self.train_on_business_context():
            return False
        
        # 5. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –¢–ó
        print("\nüìã –≠—Ç–∞–ø 5: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –¢–ó")
        if not self.train_on_tz_examples():
            return False
        
        print("\nüéâ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    
    def test_enhanced_agent(self, test_questions: List[str]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
        print("=" * 40)
        
        results = {}
        
        for question in test_questions:
            try:
                print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
                sql = self.vanna.generate_sql(question)
                print(f"üí° SQL: {sql}")
                results[question] = {
                    "sql": sql,
                    "status": "success"
                }
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                results[question] = {
                    "sql": None,
                    "status": "error",
                    "error": str(e)
                }
            print("-" * 40)
        
        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'model': 'ollama/llama3.1:8b',
        'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure'
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = EnhancedTrainingPipeline(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    if pipeline.run_enhanced_training():
        print("\nüéØ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        test_questions = [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Ä–µ–≥–∏–æ–Ω–µ?",
            "–ü–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            "–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –ø–æ—Ä—É—á–µ–Ω–∏–π"
        ]
        
        results = pipeline.test_enhanced_agent(test_questions)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('enhanced_training_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ enhanced_training_results.json")
    else:
        print("‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()
