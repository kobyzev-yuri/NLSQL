#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π KB –∞–≥–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DocStructureSchema
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –¥–≤—É—Ö–º–æ–¥–µ–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import os
import logging
import json
from typing import Optional, Dict, Any, List
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent))

from src.vanna.dual_model_pipeline import DualModelPipeline
from src.vanna.vanna_pgvector_native import DocStructureVannaNative

logger = logging.getLogger(__name__)

class EnhancedKBAgent:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π KB –∞–≥–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DocStructureSchema
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö–º–æ–¥–µ–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ KB –∞–≥–µ–Ω—Ç–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        if config is None:
            config = {}
            
        self.config = config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤—É—Ö–º–æ–¥–µ–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        self.pipeline = DualModelPipeline(config)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü—ã –∏–∑ DocStructureSchema
        self.priority_tables = [
            "equsers",                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            "eq_departments",             # –û—Ç–¥–µ–ª—ã
            "eqgroups",                   # –ì—Ä—É–ø–ø—ã
            "eqroles",                    # –†–æ–ª–∏
            "tbl_business_unit",          # –ö–ª–∏–µ–Ω—Ç—ã
            "tbl_principal_assignment",  # –ü–æ—Ä—É—á–µ–Ω–∏—è
            "tbl_incoming_payments",      # –ü–ª–∞—Ç–µ–∂–∏
            "tbl_accounts_document",      # –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            "tbl_personal_account"        # –õ–∏—á–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
        ]
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        self.system_tables = [
            "views", "view_table_usage", "vanna_vectors",
            "information_schema", "pg_catalog", "pg_*"
        ]
        
        logger.info("‚úÖ EnhancedKBAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def train_agent(self, training_data: Optional[Dict[str, Any]] = None) -> bool:
        """
        –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            training_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
        """
        try:
            logger.info("üöÄ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è KB –∞–≥–µ–Ω—Ç–∞...")
            
            # 1. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î
            logger.info("üìö –≠—Ç–∞–ø 1: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î...")
            schema_success = self.pipeline.train_on_schema()
            
            if not schema_success:
                logger.warning("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
            # 2. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã)
            if training_data and 'examples' in training_data:
                logger.info("üìö –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö...")
                examples_success = self.pipeline.train_on_examples(training_data['examples'])
                
                if not examples_success:
                    logger.warning("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
            # 3. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞)
            if training_data and 'documentation' in training_data:
                logger.info("üìö –≠—Ç–∞–ø 3: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                pass
            
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ KB –∞–≥–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
            return False
    
    def generate_sql(self, question: str, model_preference: str = 'auto') -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
            model_preference: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –º–æ–¥–µ–ª—å
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –¥–ª—è: '{question}'")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤—É—Ö–º–æ–¥–µ–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
            result = self.pipeline.generate_sql(
                question=question,
                prefer_model=model_preference
            )
            
            if result['success']:
                logger.info(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å {result['model']}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {e}")
            return {
                'success': False,
                'error': str(e),
                'question': question
            }
    
    def get_context_info(self, question: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        
        Args:
            question: –í–æ–ø—Ä–æ—Å
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            agent = self.pipeline.gpt4_agent or self.pipeline.ollama_agent
            
            if not agent:
                return {'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤'}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_info = {
                'question': question,
                'priority_tables': self.priority_tables,
                'system_tables': self.system_tables,
                'available_tables': [],
                'context_quality': 'unknown'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            try:
                tables_query = """
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
                """
                df_tables = agent.run_sql(tables_query)
                context_info['available_tables'] = df_tables['table_name'].tolist()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                business_tables_found = sum(1 for table in self.priority_tables 
                                          if table in context_info['available_tables'])
                context_info['business_tables_found'] = business_tables_found
                context_info['context_quality'] = 'good' if business_tables_found >= 5 else 'poor'
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
                context_info['error'] = str(e)
            
            return context_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {'error': str(e)}
    
    def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–π–ø–ª–∞–π–Ω
            pipeline_health = self.pipeline.health_check()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_info = self.get_context_info("—Ç–µ—Å—Ç")
            
            health = {
                'pipeline': pipeline_health,
                'context': context_info,
                'overall': all(pipeline_health.values()) and context_info.get('context_quality') != 'poor'
            }
            
            return health
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {'error': str(e)}
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            stats = {
                'pipeline_usage': self.pipeline.get_usage_stats(),
                'priority_tables': self.priority_tables,
                'system_tables': self.system_tables
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}

def create_enhanced_kb_agent(config: Optional[Dict[str, Any]] = None) -> EnhancedKBAgent:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ KB –∞–≥–µ–Ω—Ç–∞
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        
    Returns:
        EnhancedKBAgent: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç
    """
    return EnhancedKBAgent(config)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    agent = EnhancedKBAgent()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    health = agent.health_check()
    print(f"–ó–¥–æ—Ä–æ–≤—å–µ –∞–≥–µ–Ω—Ç–∞: {health}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    result = agent.generate_sql("–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = agent.get_statistics()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
