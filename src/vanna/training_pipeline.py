#!/usr/bin/env python3
"""
–ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è Vanna AI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è DocStructureSchema
–≠—Ç–∞–ø—ã:
1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
2. –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import os
import sys
import logging
from pathlib import Path
from typing import Dict, List, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.vanna.training_data_preparation import VannaTrainingDataPreparator
from src.vanna.vanna_client import DocStructureVanna
from src.vanna.training_script import VannaTrainer
from src.vanna.testing_script import VannaTester

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VannaTrainingPipeline:
    """–ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è Vanna AI –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.data_preparator = VannaTrainingDataPreparator()
        self.trainer = VannaTrainer(config)
        self.tester = VannaTester(config)
        
    def run_full_pipeline(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è Vanna AI")
            
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            if not self.prepare_training_data():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
            # –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            logger.info("ü§ñ –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
            if not self.train_agent():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—É—á–µ–Ω–∏—è")
                return False
                
            # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info("üß™ –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
            if not self.test_agent():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
                
            logger.info("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
            return False
    
    def prepare_training_data(self) -> bool:
        """–≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            logger.info("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            training_data_dir = Path(self.config.get("training_data_dir", "training_data"))
            training_data_dir.mkdir(exist_ok=True)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.data_preparator.save_training_data(str(training_data_dir))
            
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def train_agent(self) -> bool:
        """–≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        try:
            logger.info("üéì –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...")
            
            # –û–±—É—á–∞–µ–º –Ω–∞ DDL
            logger.info("üìã –û–±—É—á–µ–Ω–∏–µ –Ω–∞ DDL statements...")
            self.trainer.train_on_ddl()
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            logger.info("üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
            self.trainer.train_on_documentation()
            
            # –û–±—É—á–∞–µ–º –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö
            logger.info("üí° –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            self.trainer.train_on_sql_examples()
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            logger.info("üîç –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
            self.trainer.train_on_metadata()
            
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç –æ–±—É—á–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_agent(self) -> bool:
        """–≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        try:
            logger.info("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
            self.tester.test_basic_queries()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
            self.tester.test_complex_queries()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
            self.tester.test_error_handling()
            
            logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "database_url": "postgresql://postgres:1234@localhost:5432/test_docstructure",
        "vanna_model": "ollama/llama3.1:8b",
        "vector_db": "chromadb",
        "training_data_dir": "training_data",
        "test_questions": [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?",
            "–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º",
            "–ü–æ–∫–∞–∂–∏ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        ]
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = VannaTrainingPipeline(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
    success = pipeline.run_full_pipeline()
    
    if success:
        print("üéâ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("ü§ñ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ùå –ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
