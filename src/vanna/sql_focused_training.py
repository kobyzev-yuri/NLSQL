"""
–§–æ–∫—É—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏ SQL —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –ø–ª–∞–Ω
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
"""

import json
import os
import sys
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent))

from .vanna_pgvector_native import DocStructureVannaNative


class SQLFocusedTraining:
    """–û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ SQL —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.vanna = DocStructureVannaNative(config=config)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.priority_tables = [
            "equsers",                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            "eq_departments",            # –û—Ç–¥–µ–ª—ã
            "eqgroups",                  # –ì—Ä—É–ø–ø—ã
            "eqroles",                   # –†–æ–ª–∏
            "tbl_business_unit",         # –ö–ª–∏–µ–Ω—Ç—ã
            "tbl_principal_assignment", # –ü–æ—Ä—É—á–µ–Ω–∏—è
            "tbl_incoming_payments",     # –ü–ª–∞—Ç–µ–∂–∏
            "tbl_accounts_document",     # –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            "tbl_personal_account"       # –õ–∏—á–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
        ]
    
    def train_on_filtered_schema(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)"""
        
        try:
            print("üîç –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î...")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± - –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ INFORMATION_SCHEMA.COLUMNS
            schema_query = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS"
            
            print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
            
            df_schema = self.vanna.run_sql(schema_query)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_schema)} –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Å—Ö–µ–º—ã")
            
            plan = self.vanna.get_training_plan_generic(df_schema)
            self.vanna.train(plan=plan)
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ: {e}")
            return False
    
    def train_on_enhanced_sql_examples(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö SQL –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        
        try:
            print("üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö SQL –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            examples_file = Path("training_data/enhanced_sql_examples.json")
            if not examples_file.exists():
                print(f"‚ùå –§–∞–π–ª {examples_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(examples_file, 'r', encoding='utf-8') as f:
                examples = json.load(f)
            
            print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(examples)} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {}
            complexities = {}
            
            for example in examples:
                category = example.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                complexity = example.get('complexity', 1)
                
                categories[category] = categories.get(category, 0) + 1
                complexities[complexity] = complexities.get(complexity, 0) + 1
            
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤:")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {dict(categories)}")
            print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {dict(complexities)}")
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
            success_count = 0
            error_count = 0
            
            for i, example in enumerate(examples, 1):
                try:
                    self.vanna.train(
                        question=example['question'],
                        sql=example['sql']
                    )
                    success_count += 1
                    
                    if i % 5 == 0:  # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
                        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(examples)} ({i/len(examples)*100:.1f}%)")
                        
                except Exception as e:
                    error_count += 1
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ {i}: {example['question'][:50]}... - {e}")
            
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
            return success_count > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
            return False
    
    def train_on_business_context(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã)"""
        
        try:
            print("üè¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            context_examples = [
                {
                    "question": "–ü–æ–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã",
                    "sql": "SELECT id, login, email, surname, firstname FROM equsers WHERE deleted = false AND active = true"
                },
                {
                    "question": "–ù–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã",
                    "sql": "SELECT business_unit_name, inn, phone, email FROM tbl_business_unit WHERE region = '–ú–æ—Å–∫–≤–∞' AND deleted = false"
                },
                {
                    "question": "–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ",
                    "sql": "SELECT assignment_number, assignment_date, amount, status FROM tbl_principal_assignment WHERE status = '–í —Ä–∞–±–æ—Ç–µ' AND deleted = false"
                },
                {
                    "question": "–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                    "sql": "SELECT payment_number, payment_date, amount FROM tbl_incoming_payments WHERE payment_date = CURRENT_DATE AND deleted = false"
                }
            ]
            
            for example in context_examples:
                try:
                    self.vanna.train(
                        question=example['question'],
                        sql=example['sql']
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: {example['question']} - {e}")
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {e}")
            return False
    
    def run_sql_training(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ SQL"""
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ SQL")
        print("=" * 50)
        
        # 1. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ
        print("üîç –≠—Ç–∞–ø 1: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î")
        if not self.train_on_filtered_schema():
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å—Ö–µ–º—ã...")
        
        # 2. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö SQL –ø—Ä–∏–º–µ—Ä–∞—Ö
        print("\nüìö –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö")
        if not self.train_on_enhanced_sql_examples():
            return False
        
        # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        print("\nüè¢ –≠—Ç–∞–ø 3: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
        if not self.train_on_business_context():
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        
        print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    
    def test_sql_generation(self, test_questions: List[str]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL"""
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL")
        print("=" * 40)
        
        results = {}
        
        for question in test_questions:
            try:
                print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
                sql = self.vanna.generate_sql(question)
                print(f"üí° SQL: {sql}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ SQL
                quality_score = self._evaluate_sql_quality(sql, question)
                
                results[question] = {
                    "sql": sql,
                    "quality_score": quality_score,
                    "status": "success"
                }
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                results[question] = {
                    "sql": None,
                    "quality_score": 0,
                    "status": "error",
                    "error": str(e)
                }
            
            print("-" * 40)
        
        return results
    
    def _evaluate_sql_quality(self, sql: str, question: str) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ SQL"""
        
        score = 0.0
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if sql and sql.strip():
            score += 0.3
            
        if sql.upper().startswith('SELECT'):
            score += 0.2
            
        if 'WHERE' in sql.upper():
            score += 0.2
            
        if 'JOIN' in sql.upper():
            score += 0.2
            
        if 'GROUP BY' in sql.upper() or 'ORDER BY' in sql.upper():
            score += 0.1
            
        return min(score, 1.0)
    
    def save_training_results(self, results: Dict[str, Any], filename: str = "sql_training_results.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'model': 'ollama/llama3.1:8b',
        'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure'
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = SQLFocusedTraining(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    if trainer.run_sql_training():
        print("\nüéØ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        test_questions = [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Ä–µ–≥–∏–æ–Ω–µ?",
            "–ü–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            "–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –ø–æ—Ä—É—á–µ–Ω–∏–π",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–¥–µ–ª–∞ –ü—Ä–æ–¥–∞–∂–∏",
            "–ü–ª–∞—Ç–µ–∂–∏ –±–æ–ª—å—à–µ 1 –º–ª–Ω —Ä—É–±–ª–µ–π"
        ]
        
        results = trainer.test_sql_generation(test_questions)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        trainer.save_training_results(results)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        success_count = sum(1 for r in results.values() if r['status'] == 'success')
        avg_quality = sum(r['quality_score'] for r in results.values()) / len(results)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}/{len(results)}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.2f}")
        
    else:
        print("‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()
