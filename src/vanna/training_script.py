#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è Vanna AI –∞–≥–µ–Ω—Ç–∞
"""

import os
import sys
import logging
from pathlib import Path
from typing import Dict, List, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.vanna.vanna_pgvector_native import DocStructureVannaNative

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VannaTrainer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Vanna AI –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.vanna = DocStructureVannaNative(config=config)
        self.training_data_dir = Path(config.get("training_data_dir", "training_data"))
        
    def train_on_ddl(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ DDL statements"""
        try:
            ddl_file = self.training_data_dir / "ddl_statements.sql"
            if not ddl_file.exists():
                logger.error(f"‚ùå –§–∞–π–ª DDL –Ω–µ –Ω–∞–π–¥–µ–Ω: {ddl_file}")
                return False
                
            with open(ddl_file, 'r', encoding='utf-8') as f:
                ddl_content = f.read()
                
            # –û–±—É—á–∞–µ–º –Ω–∞ DDL
            self.vanna.train(ddl=ddl_content)
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ DDL –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ DDL: {e}")
            return False
    
    def train_on_documentation(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            doc_file = self.training_data_dir / "documentation.txt"
            if not doc_file.exists():
                logger.error(f"‚ùå –§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_file}")
                return False
                
            with open(doc_file, 'r', encoding='utf-8') as f:
                doc_content = f.read()
                
            # –û–±—É—á–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            self.vanna.train(documentation=doc_content)
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            return False
    
    def train_on_sql_examples(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        try:
            examples_file = self.training_data_dir / "sql_examples.json"
            if not examples_file.exists():
                logger.error(f"‚ùå –§–∞–π–ª SQL –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {examples_file}")
                return False
                
            with open(examples_file, 'r', encoding='utf-8') as f:
                examples = json.load(f)
                
            # –û–±—É—á–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ—Ä–µ
            for example in examples:
                question = example.get("question")
                sql = example.get("sql")
                if question and sql:
                    self.vanna.train(question=question, sql=sql)
                    
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
            return False
    
    def train_on_metadata(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        try:
            metadata_file = self.training_data_dir / "metadata.json"
            if not metadata_file.exists():
                logger.error(f"‚ùå –§–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {metadata_file}")
                return False
                
            with open(metadata_file, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
                
            # –û–±—É—á–∞–µ–º –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            # –°–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_description = f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {metadata.get('database', 'Unknown')}\n"
            db_description += f"–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {metadata.get('total_tables', 0)}\n"
            db_description += f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(metadata.get('main_tables', []))}\n"
            db_description += f"–ë–∏–∑–Ω–µ—Å-–¥–æ–º–µ–Ω—ã: {', '.join(metadata.get('business_domains', []))}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
            self.vanna.add_documentation(db_description)
                
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def train_full(self) -> bool:
        """–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        try:
            logger.info("üéì –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...")
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
            success = True
            success &= self.train_on_ddl()
            success &= self.train_on_documentation()
            success &= self.train_on_sql_examples()
            success &= self.train_on_metadata()
            
            if success:
                logger.info("‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.error("‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "vanna_model": "ollama/llama3.1:8b",
        "vector_db": "chromadb",
        "training_data_dir": "training_data"
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = VannaTrainer(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    success = trainer.train_full()
    
    if success:
        print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("ü§ñ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
