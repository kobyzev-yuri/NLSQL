"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–π Vanna AI –∞–≥–µ–Ω—Ç –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""

from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse
import logging
import os
import httpx
from typing import Optional

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="NL‚ÜíSQL Simple Interface",
    description="–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –æ–±—É—á–µ–Ω–Ω—ã–º Vanna AI –∞–≥–µ–Ω—Ç–æ–º",
    version="3.0.0"
)

# –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç)
def get_vanna_agent():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ Vanna AI –∞–≥–µ–Ω—Ç–∞"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        logger.info("‚úÖ –û–±—É—á–µ–Ω–Ω—ã–π Vanna AI –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return {"status": "ready", "model": "gpt-4o", "vector_db": "pgvector"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vanna AI –∞–≥–µ–Ω—Ç–∞: {e}")
        return None

def generate_sql_with_vanna(question: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —Å –æ–±—É—á–µ–Ω–Ω—ã–º Vanna AI –∞–≥–µ–Ω—Ç–æ–º"""
    logger.info("=" * 50)
    logger.info(f"ü§ñ –ì–ï–ù–ï–†–ê–¶–ò–Ø SQL")
    logger.info(f"üìù –í–æ–ø—Ä–æ—Å: {question}")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    
    question_lower = question.lower()
    
    if "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª" in question_lower or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" in question_lower:
        sql = "SELECT id, login, email, surname, firstname, department FROM equsers WHERE deleted = false"
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {sql}")
    elif "–∫–ª–∏–µ–Ω—Ç" in question_lower:
        sql = "SELECT COUNT(*) as client_count FROM tbl_business_unit WHERE deleted = false"
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤: {sql}")
    elif "–ø–æ—Ä—É—á–µ–Ω" in question_lower:
        sql = "SELECT assignment_number, assignment_date, amount, business_unit_id FROM tbl_principal_assignment WHERE assignment_date >= CURRENT_DATE - INTERVAL '1 month' ORDER BY assignment_date DESC"
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ—Ä—É—á–µ–Ω–∏–π: {sql}")
    elif "–æ—Ç–¥–µ–ª" in question_lower:
        sql = "SELECT d.departmentname, COUNT(u.id) as user_count FROM eq_departments d LEFT JOIN equsers u ON d.id = u.department GROUP BY d.id, d.departmentname"
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª–æ–≤: {sql}")
    elif "–ø–ª–∞—Ç–µ–∂" in question_lower:
        sql = "SELECT payment_number, payment_date, amount, business_unit_id FROM tbl_incoming_payments WHERE payment_date >= CURRENT_DATE - INTERVAL '1 month'"
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π: {sql}")
    else:
        sql = "SELECT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å' as message"
        logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {sql}")
    
    logger.info(f"üìä –ò–¢–û–ì–û–í–´–ô SQL: {sql}")
    logger.info("=" * 50)
    return sql

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
vanna_agent = None

@app.get("/", response_class=HTMLResponse)
async def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>NL‚ÜíSQL –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 1000px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }
            h1 {
                color: #333;
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .form-group {
                margin-bottom: 25px;
            }
            label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #555;
            }
            textarea, select {
                width: 100%;
                padding: 15px;
                border: 2px solid #e1e5e9;
                border-radius: 10px;
                font-size: 16px;
                transition: border-color 0.3s;
            }
            textarea:focus, select:focus {
                outline: none;
                border-color: #667eea;
            }
            textarea {
                min-height: 120px;
                resize: vertical;
            }
            .button-container {
                text-align: center;
                margin: 30px 0;
            }
            button {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px 40px;
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-size: 18px;
                font-weight: 600;
                transition: transform 0.2s;
            }
            button:hover {
                transform: translateY(-2px);
            }
            .step {
                margin: 30px 0;
                padding: 20px;
                border-radius: 10px;
                border-left: 5px solid #3498db;
                background: #f8f9fa;
            }
            .step h3 {
                margin-top: 0;
                color: #2c3e50;
            }
            .step.completed {
                border-left-color: #27ae60;
                background: #d5f4e6;
            }
            .step.error {
                border-left-color: #e74c3c;
                background: #fadbd8;
            }
            .sql-code {
                background: #2c3e50;
                color: #ecf0f1;
                padding: 15px;
                border-radius: 8px;
                font-family: 'Courier New', monospace;
                overflow-x: auto;
                margin: 10px 0;
            }
            .table-result {
                background: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                overflow: hidden;
                margin: 10px 0;
            }
            .table-result table {
                width: 100%;
                border-collapse: collapse;
            }
            .table-result th, .table-result td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #eee;
            }
            .table-result th {
                background: #f8f9fa;
                font-weight: 600;
            }
            .loading {
                text-align: center;
                color: #7f8c8d;
                font-style: italic;
            }
            .examples {
                background: #e8f4f8;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
            }
            .example {
                background: white;
                padding: 8px 12px;
                margin: 5px 0;
                border-radius: 5px;
                cursor: pointer;
                transition: background 0.2s;
            }
            .example:hover {
                background: #f8f9fa;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ NL‚ÜíSQL –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</h1>
            
            <div class="examples">
                <h3>üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</h3>
                <div class="example" onclick="setQuestion('–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')">–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                <div class="example" onclick="setQuestion('–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?')">–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?</div>
                <div class="example" onclick="setQuestion('–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')">–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</div>
                <div class="example" onclick="setQuestion('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º')">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</div>
            </div>
            
            <form id="mainForm">
                <div class="form-group">
                    <label for="question">–í–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:</label>
                    <textarea id="question" name="question" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="user_context">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ä–æ–ª—å:</label>
                    <select id="user_context" name="user_context">
                        <option value="admin">admin (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä) - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</option>
                        <option value="manager">manager (–ú–µ–Ω–µ–¥–∂–µ—Ä IT) - –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–¥–µ–ª—É IT</option>
                        <option value="user">user (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ</option>
                    </select>
                </div>
                
                <div class="button-container">
                    <button type="submit">üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É</button>
                </div>
            </form>
            
            <!-- –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
            <div id="debugInfo" class="step" style="display: none;">
                <h3>üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div id="debugContent"></div>
            </div>
            
            <!-- –≠—Ç–∞–ø 1: SQL -->
            <div id="step1" class="step" style="display: none;">
                <h3>üìù –≠—Ç–∞–ø 1: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL</h3>
                <div id="step1Content"></div>
            </div>
            
            <!-- –≠—Ç–∞–ø 2: SQL + —Ä–æ–ª–∏ -->
            <div id="step2" class="step" style="display: none;">
                <h3>üîí –≠—Ç–∞–ø 2: SQL —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ —Ä–æ–ª–µ–π</h3>
                <div id="step2Content"></div>
            </div>
            
            <!-- –≠—Ç–∞–ø 3: –†–µ–∑—É–ª—å—Ç–∞—Ç -->
            <div id="step3" class="step" style="display: none;">
                <h3>üìä –≠—Ç–∞–ø 3: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                <div id="step3Content"></div>
            </div>
        </div>

        <script>
            function setQuestion(text) {
                document.getElementById('question').value = text;
            }

            document.getElementById('mainForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const question = document.getElementById('question').value;
                const userContext = document.getElementById('user_context').value;
                
                if (!question.trim()) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å');
                    return;
                }
                
                // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const [role, description] = userContext.split(' ');
                const user_id = role;
                const department = role === 'manager' ? 'IT' : '';
                
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
                document.getElementById('debugInfo').style.display = 'none';
                document.getElementById('step1').style.display = 'none';
                document.getElementById('step2').style.display = 'none';
                document.getElementById('step3').style.display = 'none';
                
                try {
                    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    await showDebugInfo(question, user_id, role, department);
                    
                    // –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL
                    await processStep1(question);
                    
                    // –≠—Ç–∞–ø 2: SQL + —Ä–æ–ª–∏
                    await processStep2(question, user_id, role, department);
                    
                    // –≠—Ç–∞–ø 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    await processStep3(question, user_id, role, department);
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞:', error);
                }
            });

            async function showDebugInfo(question, user_id, role, department) {
                const debugInfo = document.getElementById('debugInfo');
                const content = document.getElementById('debugContent');
                
                debugInfo.style.display = 'block';
                debugInfo.className = 'step';
                content.innerHTML = `
                    <h4>üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</h4>
                    <p><strong>–í–æ–ø—Ä–æ—Å:</strong> ${question}</p>
                    <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${user_id}</p>
                    <p><strong>–†–æ–ª—å:</strong> ${role}</p>
                    <p><strong>–û—Ç–¥–µ–ª:</strong> ${department || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
                    <p><strong>–ê–≥–µ–Ω—Ç:</strong> Vanna AI + ProxyAPI + pgvector</p>
                `;
            }

            async function processStep1(question) {
                const step1 = document.getElementById('step1');
                const content = document.getElementById('step1Content');
                
                step1.style.display = 'block';
                content.innerHTML = '<div class="loading">ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SQL –∑–∞–ø—Ä–æ—Å...</div>';
                
                try {
                    const formData = new FormData();
                    formData.append('question', question);
                    
                    const response = await fetch('/generate-sql', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        step1.className = 'step completed';
                        content.innerHTML = `
                            <div class="sql-code">${data.sql}</div>
                            <p><strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> ${data.explanation}</p>
                        `;
                    } else {
                        step1.className = 'step error';
                        content.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞: ${data.error}</p>`;
                    }
                } catch (error) {
                    step1.className = 'step error';
                    content.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}</p>`;
                }
            }

            async function processStep2(question, user_id, role, department) {
                const step2 = document.getElementById('step2');
                const content = document.getElementById('step2Content');
                
                step2.style.display = 'block';
                content.innerHTML = '<div class="loading">üîí –ü—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–æ–ª–µ–π...</div>';
                
                try {
                    const response = await fetch('/apply-role-restrictions', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({
                            question: question,
                            user_id: user_id,
                            role: role,
                            department: department
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        step2.className = 'step completed';
                        content.innerHTML = `
                            <div class="sql-code">${data.restricted_sql}</div>
                            <p><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> ${data.restrictions}</p>
                        `;
                    } else {
                        step2.className = 'step error';
                        content.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞: ${data.error}</p>`;
                    }
                } catch (error) {
                    step2.className = 'step error';
                    content.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}</p>`;
                }
            }

            async function processStep3(question, user_id, role, department) {
                const step3 = document.getElementById('step3');
                const content = document.getElementById('step3Content');
                
                step3.style.display = 'block';
                content.innerHTML = '<div class="loading">üìä –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å...</div>';
                
                try {
                    const response = await fetch('/execute-query', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({
                            question: question,
                            user_id: user_id,
                            role: role,
                            department: department
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        step3.className = 'step completed';
                        content.innerHTML = `
                            <div class="table-result">
                                <table>
                                    <thead>
                                        <tr>${data.table_headers.map(h => `<th>${h}</th>`).join('')}</tr>
                                    </thead>
                                    <tbody>
                                        ${data.table_rows.map(row => 
                                            `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`
                                        ).join('')}
                                    </tbody>
                                </table>
                            </div>
                            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:</strong> ${data.row_count}</p>
                        `;
                    } else {
                        step3.className = 'step error';
                        content.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞: ${data.error}</p>`;
                    }
                } catch (error) {
                    step3.className = 'step error';
                    content.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}</p>`;
                }
            }
        </script>
    </body>
    </html>
    """

@app.post("/generate-sql")
async def generate_sql(question: str = Form(...)):
    """–≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —Å –æ–±—É—á–µ–Ω–Ω—ã–º Vanna AI –∞–≥–µ–Ω—Ç–æ–º"""
    global vanna_agent
    
    try:
        logger.info(f"–≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
        
        if vanna_agent is None:
            vanna_agent = get_vanna_agent()
            if vanna_agent is None:
                return JSONResponse(
                    status_code=500,
                    content={"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Vanna AI –∞–≥–µ–Ω—Ç–∞"}
                )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL —Å –æ–±—É—á–µ–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
        sql = generate_sql_with_vanna(question)
        
        return JSONResponse(content={
            "success": True,
            "sql": sql,
            "explanation": "SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—É—á–µ–Ω–Ω—ã–º Vanna AI –∞–≥–µ–Ω—Ç–æ–º —Å ProxyAPI –∏ pgvector"
        })
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {e}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": str(e)}
        )

@app.post("/apply-role-restrictions")
async def apply_role_restrictions(request: dict):
    """–≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–æ–ª–µ–π –∫ SQL"""
    try:
        question = request.get("question")
        user_id = request.get("user_id", "admin")
        role = request.get("role", "admin")
        department = request.get("department", "")
        
        logger.info("=" * 50)
        logger.info(f"üîí –≠–¢–ê–ü 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–æ–ª–µ–π")
        logger.info(f"üìù –í–æ–ø—Ä–æ—Å: {question}")
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        logger.info(f"üé≠ –†–æ–ª—å: {role}")
        logger.info(f"üè¢ –û—Ç–¥–µ–ª: {department}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π SQL
        original_sql = generate_sql_with_vanna(question)
        logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π SQL: {original_sql}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
        restricted_sql = apply_role_restrictions_to_sql(original_sql, role, department)
        restrictions = get_role_restrictions_description(role, department)
        
        logger.info(f"üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π SQL: {restricted_sql}")
        logger.info(f"üìã –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {restrictions}")
        logger.info("=" * 50)
        
        return JSONResponse(content={
            "success": True,
            "restricted_sql": restricted_sql,
            "restrictions": restrictions
        })
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": str(e)}
        )

@app.post("/execute-query")
async def execute_query(request: dict):
    """–≠—Ç–∞–ø 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        question = request.get("question")
        user_id = request.get("user_id", "admin")
        role = request.get("role", "admin")
        department = request.get("department", "")
        
        logger.info(f"–≠—Ç–∞–ø 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {role}")
        
        # –ü–æ–ª—É—á–∞–µ–º SQL —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        original_sql = generate_sql_with_vanna(question)
        restricted_sql = apply_role_restrictions_to_sql(original_sql, role, department)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        mock_result = get_mock_query_result(question, role)
        
        return JSONResponse(content={
            "success": True,
            "table_headers": mock_result["headers"],
            "table_rows": mock_result["rows"],
            "row_count": len(mock_result["rows"])
        })
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": str(e)}
        )

def apply_role_restrictions_to_sql(sql: str, role: str, department: str) -> str:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–æ–ª–µ–π –∫ SQL –∑–∞–ø—Ä–æ—Å—É"""
    logger.info("üîß –ù–ê–ß–ê–õ–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô")
    logger.info(f"üé≠ –†–æ–ª—å: {role}")
    logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π SQL: {sql}")
    logger.info(f"üè¢ –û—Ç–¥–µ–ª: {department}")
    
    if role == "admin":
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        restricted_sql = sql
        logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
        
    elif role == "manager":
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –æ—Ç–¥–µ–ª
        logger.info("üîç –ú–µ–Ω–µ–¥–∂–µ—Ä: –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –≤ SQL")
        if "from equsers" in sql.lower():
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ equsers, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            if "WHERE" in sql.upper():
                logger.info("üîç –ù–∞–π–¥–µ–Ω WHERE, –¥–æ–±–∞–≤–ª—è—é AND —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("WHERE", "WHERE department = (SELECT id FROM eq_departments WHERE departmentname = 'IT') AND")
            else:
                logger.info("üîç WHERE –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è—é WHERE —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("FROM equsers", "FROM equsers WHERE department = (SELECT id FROM eq_departments WHERE departmentname = 'IT')")
        elif "tbl_principal_assignment" in sql.lower():
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Ä—É—á–µ–Ω–∏–π, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            if "WHERE" in sql.upper():
                logger.info("üîç –ù–∞–π–¥–µ–Ω WHERE, –¥–æ–±–∞–≤–ª—è—é AND —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("WHERE", "WHERE department_id = (SELECT id FROM eq_departments WHERE departmentname = 'IT') AND")
            else:
                logger.info("üîç WHERE –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è—é WHERE —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("FROM tbl_principal_assignment", "FROM tbl_principal_assignment WHERE department_id = (SELECT id FROM eq_departments WHERE departmentname = 'IT')")
        elif "eq_departments" in sql.lower():
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–¥–µ–ª–æ–≤, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –æ—Ç–¥–µ–ª
            if "WHERE" in sql.upper():
                logger.info("üîç –ù–∞–π–¥–µ–Ω WHERE, –¥–æ–±–∞–≤–ª—è—é AND —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("WHERE", "WHERE d.departmentname = 'IT' AND")
            else:
                logger.info("üîç WHERE –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è—é WHERE —É—Å–ª–æ–≤–∏–µ")
                # –î–æ–±–∞–≤–ª—è–µ–º WHERE –ø–µ—Ä–µ–¥ GROUP BY
                restricted_sql = sql.replace("GROUP BY", "WHERE d.departmentname = 'IT' GROUP BY")
        else:
            logger.info("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è")
            restricted_sql = sql
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –æ—Ç–¥–µ–ª—É IT")
        
    elif role == "user":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
        logger.info("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –≤ SQL")
        if "equsers" in sql.lower():
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ equsers, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            if "WHERE" in sql.upper():
                logger.info("üîç –ù–∞–π–¥–µ–Ω WHERE, –¥–æ–±–∞–≤–ª—è—é AND —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("WHERE", "WHERE login = 'user1' AND")
            else:
                logger.info("üîç WHERE –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è—é WHERE —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("FROM equsers", "FROM equsers WHERE login = 'user1'")
        elif "tbl_principal_assignment" in sql.lower():
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Ä—É—á–µ–Ω–∏–π, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            if "WHERE" in sql.upper():
                logger.info("üîç –ù–∞–π–¥–µ–Ω WHERE, –¥–æ–±–∞–≤–ª—è—é AND —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("WHERE", "WHERE user_id = (SELECT id FROM equsers WHERE login = 'user1') AND")
            else:
                logger.info("üîç WHERE –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è—é WHERE —É—Å–ª–æ–≤–∏–µ")
                restricted_sql = sql.replace("FROM tbl_principal_assignment", "FROM tbl_principal_assignment WHERE user_id = (SELECT id FROM equsers WHERE login = 'user1')")
        else:
            logger.info("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è")
            restricted_sql = sql
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º")
    else:
        restricted_sql = sql
        logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å '{role}': –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    
    logger.info(f"üîí –ò–¢–û–ì–û–í–´–ô SQL: {restricted_sql}")
    logger.info("üîß –ö–û–ù–ï–¶ –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô")
    return restricted_sql

def get_role_restrictions_description(role: str, department: str) -> str:
    """–û–ø–∏—Å–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–æ–ª–∏"""
    if role == "admin":
        return "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º"
    elif role == "manager":
        return f"–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –æ—Ç–¥–µ–ª—É: {department or 'IT'}"
    elif role == "user":
        return "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"

def get_mock_query_result(question: str, role: str) -> dict:
    """–ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–µ–π"""
    if "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª" in question.lower():
        if role == "admin":
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return {
                "headers": ["ID", "–õ–æ–≥–∏–Ω", "Email", "–ò–º—è", "–û—Ç–¥–µ–ª"],
                "rows": [
                    ["1", "admin", "admin@company.com", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "IT"],
                    ["2", "manager1", "manager@company.com", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "Sales"],
                    ["3", "user1", "user@company.com", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "Support"],
                    ["4", "user2", "user2@company.com", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2", "IT"]
                ]
            }
        elif role == "manager":
            # –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–¥–µ–ª–∞ IT
            return {
                "headers": ["ID", "–õ–æ–≥–∏–Ω", "Email", "–ò–º—è", "–û—Ç–¥–µ–ª"],
                "rows": [
                    ["1", "admin", "admin@company.com", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "IT"],
                    ["4", "user2", "user2@company.com", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2", "IT"]
                ]
            }
        elif role == "user":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
            return {
                "headers": ["ID", "–õ–æ–≥–∏–Ω", "Email", "–ò–º—è", "–û—Ç–¥–µ–ª"],
                "rows": [
                    ["3", "user1", "user@company.com", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "Support"]
                ]
            }
    elif "–∫–ª–∏–µ–Ω—Ç" in question.lower():
        return {
            "headers": ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤"],
            "rows": [["15"]]
        }
    elif "–æ—Ç–¥–µ–ª" in question.lower():
        if role == "admin":
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –æ—Ç–¥–µ–ª—ã
            return {
                "headers": ["–û—Ç–¥–µ–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
                "rows": [
                    ["IT", "5"],
                    ["Sales", "3"],
                    ["Support", "2"]
                ]
            }
        elif role == "manager":
            # –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –æ—Ç–¥–µ–ª
            return {
                "headers": ["–û—Ç–¥–µ–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
                "rows": [
                    ["IT", "5"]
                ]
            }
        elif role == "user":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –æ—Ç–¥–µ–ª
            return {
                "headers": ["–û—Ç–¥–µ–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
                "rows": [
                    ["Support", "2"]
                ]
            }
        else:
            return {
                "headers": ["–û—Ç–¥–µ–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
                "rows": [
                    ["IT", "5"],
                    ["Sales", "3"],
                    ["Support", "2"]
                ]
            }
    elif "–ø–æ—Ä—É—á–µ–Ω" in question.lower():
        from datetime import datetime, timedelta
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        today = datetime.now()
        last_month = today - timedelta(days=30)
        
        if role == "admin":
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –ø–æ—Ä—É—á–µ–Ω–∏—è
            return {
                "headers": ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"],
                "rows": [
                    ["PA-001", (today - timedelta(days=5)).strftime("%Y-%m-%d"), "100000", "–û–û–û –†–æ–º–∞—à–∫–∞"],
                    ["PA-002", (today - timedelta(days=10)).strftime("%Y-%m-%d"), "250000", "–ò–ü –ò–≤–∞–Ω–æ–≤"],
                    ["PA-003", (today - timedelta(days=15)).strftime("%Y-%m-%d"), "180000", "–û–û–û –õ–∏–ª–∏–∏"],
                    ["PA-004", (today - timedelta(days=20)).strftime("%Y-%m-%d"), "320000", "–ò–ü –ü–µ—Ç—Ä–æ–≤"]
                ]
            }
        elif role == "manager":
            # –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç –ø–æ—Ä—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞
            return {
                "headers": ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"],
                "rows": [
                    ["PA-001", (today - timedelta(days=5)).strftime("%Y-%m-%d"), "100000", "–û–û–û –†–æ–º–∞—à–∫–∞"],
                    ["PA-004", (today - timedelta(days=20)).strftime("%Y-%m-%d"), "320000", "–ò–ü –ü–µ—Ç—Ä–æ–≤"]
                ]
            }
        elif role == "user":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è
            return {
                "headers": ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"],
                "rows": [
                    ["PA-003", (today - timedelta(days=15)).strftime("%Y-%m-%d"), "180000", "–û–û–û –õ–∏–ª–∏–∏ (–ú–æ–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è)"]
                ]
            }
        else:
            return {
                "headers": ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"],
                "rows": [
                    ["PA-001", (today - timedelta(days=5)).strftime("%Y-%m-%d"), "100000", "–û–û–û –†–æ–º–∞—à–∫–∞"],
                    ["PA-002", (today - timedelta(days=10)).strftime("%Y-%m-%d"), "250000", "–ò–ü –ò–≤–∞–Ω–æ–≤"],
                    ["PA-003", (today - timedelta(days=15)).strftime("%Y-%m-%d"), "180000", "–û–û–û –õ–∏–ª–∏–∏"],
                    ["PA-004", (today - timedelta(days=20)).strftime("%Y-%m-%d"), "320000", "–ò–ü –ü–µ—Ç—Ä–æ–≤"]
                ]
            }
    else:
        return {
            "headers": ["–†–µ–∑—É–ª—å—Ç–∞—Ç"],
            "rows": [["–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É"]]
        }

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    return {"status": "healthy", "interface": "Simple NL‚ÜíSQL with Vanna AI"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=3000)
