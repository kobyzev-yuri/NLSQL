#!/usr/bin/env python3
"""
CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø–ª–∞–Ω–∞–º–∏ –∏ SQL
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python plan_sql_cli.py plan-to-sql plan.json
    python plan_sql_cli.py sql-to-plan "SELECT * FROM users"
    python plan_sql_cli.py validate plan.json
"""

import json
import sys
import argparse
from pathlib import Path
from plan_sql_converter import plan_to_sql, sql_to_plan


def plan_to_sql_cli(plan_file: str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –≤ SQL"""
    try:
        with open(plan_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø–æ–ª–µ 'plan' –∏–ª–∏ –±—ã—Ç—å –∫–æ—Ä–Ω–µ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º)
        if 'plan' in data:
            plan = data['plan']
        else:
            plan = data
        
        sql = plan_to_sql(plan)
        print("SQL –∑–∞–ø—Ä–æ—Å:")
        print(sql)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = plan_file.replace('.json', '_converted.sql')
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(sql)
        print(f"\nSQL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def sql_to_plan_cli(sql_query: str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SQL –≤ –ø–ª–∞–Ω"""
    try:
        plan = sql_to_plan(sql_query)
        print("–ü–ª–∞–Ω –∑–∞–ø—Ä–æ—Å–∞:")
        print(json.dumps(plan, ensure_ascii=False, indent=2))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = "converted_plan.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(plan, f, ensure_ascii=False, indent=2)
        print(f"\n–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def validate_plan_cli(plan_file: str):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        with open(plan_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø–æ–ª–µ 'plan' –∏–ª–∏ –±—ã—Ç—å –∫–æ—Ä–Ω–µ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º)
        if 'plan' in data:
            plan = data['plan']
        else:
            plan = data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['tables', 'fields']
        missing_fields = [field for field in required_fields if field not in plan]
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
        if not isinstance(plan['tables'], list) or not plan['tables']:
            print("‚ùå –ü–æ–ª–µ 'tables' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
            return False
        
        if not isinstance(plan['fields'], list) or not plan['fields']:
            print("‚ùå –ü–æ–ª–µ 'fields' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        optional_fields = ['conditions', 'joins', 'group_by', 'order_by', 'limit']
        for field in optional_fields:
            if field in plan:
                if field == 'conditions' and not isinstance(plan[field], list):
                    print(f"‚ùå –ü–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                    return False
                elif field == 'joins' and not isinstance(plan[field], list):
                    print(f"‚ùå –ü–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                    return False
                elif field == 'group_by' and not isinstance(plan[field], list):
                    print(f"‚ùå –ü–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                    return False
                elif field == 'order_by' and not isinstance(plan[field], list):
                    print(f"‚ùå –ü–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                    return False
                elif field == 'limit' and not isinstance(plan[field], int):
                    print(f"‚ùå –ü–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    return False
        
        print("‚úÖ –ü–ª–∞–Ω –≤–∞–ª–∏–¥–µ–Ω")
        
        # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ SQL
        try:
            sql = plan_to_sql(plan)
            print("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ SQL")
            print(f"SQL: {sql}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ SQL: {e}")
            return False
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def batch_convert_cli(input_dir: str, output_dir: str):
    """–ü–∞–∫–µ—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –≤ SQL"""
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    
    if not input_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {input_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        sys.exit(1)
    
    output_path.mkdir(exist_ok=True)
    
    json_files = list(input_path.glob("*.json"))
    if not json_files:
        print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir} –Ω–µ—Ç JSON —Ñ–∞–π–ª–æ–≤")
        sys.exit(1)
    
    success_count = 0
    error_count = 0
    
    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                plan = json.load(f)
            
            sql = plan_to_sql(plan)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL
            sql_file = output_path / f"{json_file.stem}.sql"
            with open(sql_file, 'w', encoding='utf-8') as f:
                f.write(sql)
            
            print(f"‚úÖ {json_file.name} -> {sql_file.name}")
            success_count += 1
            
        except Exception as e:
            print(f"‚ùå {json_file.name}: {e}")
            error_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")


def main():
    parser = argparse.ArgumentParser(
        description="CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø–ª–∞–Ω–∞–º–∏ –∏ SQL",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python plan_sql_cli.py plan-to-sql plan.json
  python plan_sql_cli.py sql-to-plan "SELECT * FROM users WHERE id = 1"
  python plan_sql_cli.py validate plan.json
  python plan_sql_cli.py batch-convert ./plans ./sql_output
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # plan-to-sql
    plan_to_sql_parser = subparsers.add_parser('plan-to-sql', help='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –≤ SQL')
    plan_to_sql_parser.add_argument('plan_file', help='–§–∞–π–ª —Å –ø–ª–∞–Ω–æ–º (JSON)')
    
    # sql-to-plan
    sql_to_plan_parser = subparsers.add_parser('sql-to-plan', help='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SQL –≤ –ø–ª–∞–Ω')
    sql_to_plan_parser.add_argument('sql_query', help='SQL –∑–∞–ø—Ä–æ—Å')
    
    # validate
    validate_parser = subparsers.add_parser('validate', help='–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω')
    validate_parser.add_argument('plan_file', help='–§–∞–π–ª —Å –ø–ª–∞–Ω–æ–º (JSON)')
    
    # batch-convert
    batch_parser = subparsers.add_parser('batch-convert', help='–ü–∞–∫–µ—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')
    batch_parser.add_argument('input_dir', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–ª–∞–Ω–∞–º–∏')
    batch_parser.add_argument('output_dir', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è SQL —Ñ–∞–π–ª–æ–≤')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    if args.command == 'plan-to-sql':
        plan_to_sql_cli(args.plan_file)
    elif args.command == 'sql-to-plan':
        sql_to_plan_cli(args.sql_query)
    elif args.command == 'validate':
        validate_plan_cli(args.plan_file)
    elif args.command == 'batch-convert':
        batch_convert_cli(args.input_dir, args.output_dir)


if __name__ == "__main__":
    main()
