"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã
"""

import streamlit as st
import requests
import json
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="NL‚ÜíSQL System",
    page_icon="üîç",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üîç NL‚ÜíSQL System")
st.markdown("–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    col_role, col_dept = st.columns(2)
    with col_role:
        role = st.selectbox("–†–æ–ª—å:", ["admin", "manager", "user"])
    with col_dept:
        department = st.selectbox("–û—Ç–¥–µ–ª:", ["IT", "Finance", "HR"])
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if "example_question" not in st.session_state:
        st.session_state.example_question = ""
    
    question = st.text_area(
        "–í–∞—à –≤–æ–ø—Ä–æ—Å:",
        value=st.session_state.example_question,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –≤—Å–µ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
        height=100,
        key="question_input"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if st.button("üîç –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL", type="primary", use_container_width=True):
        if question:
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL..."):
                try:
                    # –í—ã–∑–æ–≤ API
                    response = requests.post(
                        "http://localhost:3000/generate-sql",
                        data={
                            "question": question,
                            "role": role,
                            "department": department
                        },
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            st.success("‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                            st.code(data.get("sql", ""), language="sql")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL –≤ session state –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            st.session_state.generated_sql = data.get("sql", "")
                            st.session_state.generated_role = role
                            st.session_state.generated_department = department
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data.get('error', 'Unknown error')}")
                    else:
                        st.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                        
                except requests.exceptions.RequestException as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                except Exception as e:
                    st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        else:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")

with col2:
    st.subheader("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL
    if hasattr(st.session_state, 'generated_sql') and st.session_state.generated_sql:
        st.markdown("**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:**")
        st.code(st.session_state.generated_sql, language="sql")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if st.button("‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL", use_container_width=True):
            with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL..."):
                try:
                    exec_response = requests.post(
                        "http://localhost:3000/execute-sql",
                        data={
                            "question": st.session_state.generated_sql,
                            "role": st.session_state.generated_role,
                            "department": st.session_state.generated_department
                        },
                        timeout=30
                    )
                    
                    if exec_response.status_code == 200:
                        exec_data = exec_response.json()
                        if exec_data.get("success"):
                            st.success("‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
                            st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
                            if exec_data.get("data"):
                                st.dataframe(exec_data.get("data"), use_container_width=True)
                            else:
                                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exec_data.get('error', 'Unknown error')}")
                    else:
                        st.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {exec_response.status_code}")
                        
                except requests.exceptions.RequestException as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                except Exception as e:
                    st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    else:
        st.info("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ SQL")

# –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
st.subheader("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
examples = [
    "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –ø–æ—Ä—É—á–µ–Ω–∏—è",
    "–ù–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ IT –æ—Ç–¥–µ–ª–∞", 
    "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º",
    "–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
]

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
cols = st.columns(2)
for i, example in enumerate(examples):
    with cols[i % 2]:
        if st.button(f"üìù {example}", key=f"example_{i}", use_container_width=True):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –≤ session state
            st.session_state.example_question = example
            st.rerun()

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
st.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
col1, col2, col3 = st.columns(3)

with col1:
    try:
        response = requests.get("http://localhost:3000/", timeout=5)
        if response.status_code == 200:
            st.success("‚úÖ FastAPI (3000)")
        else:
            st.error("‚ùå FastAPI (3000)")
    except:
        st.error("‚ùå FastAPI (3000)")

with col2:
    try:
        response = requests.get("http://localhost:8081/health", timeout=5)
        if response.status_code == 200:
            st.success("‚úÖ Mock API (8081)")
        else:
            st.error("‚ùå Mock API (8081)")
    except:
        st.error("‚ùå Mock API (8081)")

with col3:
    st.success("‚úÖ Streamlit (8501)")