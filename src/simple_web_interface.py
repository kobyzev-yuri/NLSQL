"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã
–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –æ–±—É—á–µ–Ω–Ω—ã–º Vanna AI –∞–≥–µ–Ω—Ç–æ–º
"""

from fastapi import FastAPI, Form
from fastapi.responses import HTMLResponse, JSONResponse
import httpx
import logging
import os
import sys
import re
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from src.utils.plan_sql_converter import sql_to_plan
from src.services.query_service import QueryService

def fix_sql_for_mock_api(sql: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç SQL –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Mock API"""
    if not sql:
        return sql
    
    # –£–±–∏—Ä–∞–µ–º –∞–ª–∏–∞—Å—ã —Ç–∞–±–ª–∏—Ü —Ç–æ–ª—å–∫–æ –≤ FROM –∏ JOIN, –Ω–µ —Ç—Ä–æ–≥–∞—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ WHERE/ON
    # –ü—Ä–∏–º–µ—Ä: FROM equsers u -> FROM equsers (–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å WHERE)
    sql = re.sub(r'FROM\s+(\w+)\s+(?!WHERE\b)(\w+)\b', r'FROM \1', sql, flags=re.IGNORECASE)
    # –ü—Ä–∏–º–µ—Ä: JOIN eq_departments d ON ... -> JOIN eq_departments ON ... (–Ω–µ —É–¥–∞–ª—è—Ç—å ON)
    sql = re.sub(r'JOIN\s+(\w+)\s+(?!ON\b)(\w+)\b', r'JOIN \1', sql, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –∞–ª–∏–∞—Å—ã –≤ –ø–æ–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, u.id -> id, d.name -> name)
    sql = re.sub(r'\b\w+\.(\w+)\b', r'\1', sql)
    
    return sql

def normalize_sql_for_postgres(sql: str) -> str:
    """–ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–µ SQL (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ–ª–æ–º–æ–∫)."""
    return sql

def extract_sql_from_text(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç SQL –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ò—â–µ—Ç –±–ª–æ–∫ SELECT ... [;]."""
    if not text:
        return text
    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–æ–¥-–±–ª–æ–∫
    m = re.search(r"```sql\s*(.*?)\s*```", text, flags=re.IGNORECASE | re.DOTALL)
    if m:
        return m.group(1).strip()
    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ SELECT ... ;
    m2 = re.search(r"(select[\s\S]+?;)", text, flags=re.IGNORECASE)
    if m2:
        return m2.group(1).strip()
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π, –±–µ—Ä–µ–º –æ—Ç SELECT –¥–æ –∫–æ–Ω—Ü–∞
    m3 = re.search(r"(select[\s\S]+)$", text, flags=re.IGNORECASE)
    if m3:
        return m3.group(1).strip()
    return text.strip()

## –£–¥–∞–ª—ë–Ω rule-based —Ñ–æ–ª–ª–±—ç–∫: –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SELECT, –æ—Ç–≤–µ—á–∞–µ–º –æ—à–∏–±–∫–æ–π

# –§—É–Ω–∫—Ü–∏—è apply_role_restrictions —É–¥–∞–ª–µ–Ω–∞ - —Ä–æ–ª–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ Mock API
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="NL‚ÜíSQL Simple Interface",
    description="–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–≥–æ Vanna AI –∞–≥–µ–Ω—Ç–∞",
    version="2.0.0"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QueryService —Å KB
def get_query_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ QueryService —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º KB"""
    try:
        # –°–æ–∑–¥–∞–µ–º QueryService (–æ–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç KB –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        query_service = QueryService()
        logger.info("‚úÖ QueryService —Å KB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return query_service
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QueryService: {e}")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è QueryService
query_service = None

@app.get("/", response_class=HTMLResponse)
async def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>NL‚ÜíSQL –ü—Ä–æ—Å—Ç–æ–π –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 100%;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                max-width: 1600px;
                margin: 0 auto;
            }
            .roles-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
                gap: 12px;
                margin-top: 12px;
            }
            .role-card {
                border: 1px solid #e1e5e9;
                border-radius: 10px;
                padding: 12px;
                background: #fff;
                cursor: pointer;
                transition: box-shadow 0.2s;
            }
            .role-card:hover { box-shadow: 0 6px 14px rgba(0,0,0,0.08); }
            .role-title { font-weight: 700; margin: 0 0 6px 0; }
            .role-desc { color: #6c757d; margin: 0; font-size: 14px; }
            h1 {
                color: #333;
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .form-group {
                margin-bottom: 25px;
            }
            label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #555;
            }
            textarea {
                width: 100%;
                padding: 15px;
                border: 2px solid #e1e5e9;
                border-radius: 10px;
                font-size: 16px;
                resize: vertical;
                min-height: 120px;
                transition: border-color 0.3s;
            }
            textarea:focus {
                outline: none;
                border-color: #667eea;
            }
            .button-container {
                text-align: center;
                margin: 30px 0;
            }
            button {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px 40px;
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-size: 18px;
                font-weight: 600;
                transition: transform 0.2s;
            }
            button:hover {
                transform: translateY(-2px);
            }
            .result {
                margin-top: 30px;
                padding: 20px;
                background: #f8f9fa;
                border-radius: 10px;
                border-left: 5px solid #667eea;
            }
            .error {
                border-left-color: #dc3545;
                background: #f8d7da;
            }
            .success {
                border-left-color: #28a745;
                background: #d4edda;
            }
            .loading {
                text-align: center;
                color: #666;
                font-style: italic;
            }
            .examples {
                background: #e9ecef;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
            }
            .examples h3 {
                margin-top: 0;
                color: #495057;
            }
            .example {
                background: white;
                padding: 8px 12px;
                margin: 5px 0;
                border-radius: 5px;
                cursor: pointer;
                transition: background 0.2s;
            }
            .example:hover {
                background: #f8f9fa;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ NL‚ÜíSQL –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h1>
            
            <div class="examples">
                <h3>üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</h3>
                <div class="example" onclick="setQuestion('–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')">–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                <div class="example" onclick="setQuestion('–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?')">–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?</div>
                <div class="example" onclick="setQuestion('–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')">–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</div>
                <div class="example" onclick="setQuestion('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º')">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</div>
                <div class="example" onclick="setQuestion('–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')">–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                <div class="example" onclick="setQuestion('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º')">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º</div>
                <div class="example" onclick="setQuestion('–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')">–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º</div>
                <div class="example" onclick="setQuestion('–ü–æ—Ä—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ manager')">–ü–æ—Ä—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ manager</div>
                <div class="example" onclick="setQuestion('–°–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü —Å –ò–ù–ù')">–°–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü —Å –ò–ù–ù</div>
            </div>
            
            <form id="sqlForm">
                <div class="form-group">
                    <label for="question">–í–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:</label>
                    <textarea id="question" name="question" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?, –ü–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü" required></textarea>
                </div>
                <div class="form-group" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 12px; align-items: end;">
                    <div>
                        <label for="role">–†–æ–ª—å:</label>
                        <select id="role" name="role">
                            <option value="admin">admin (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)</option>
                            <option value="manager">manager (–ú–µ–Ω–µ–¥–∂–µ—Ä)</option>
                            <option value="user">user (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)</option>
                        </select>
                    </div>
                    <div>
                        <label for="department">–û—Ç–¥–µ–ª:</label>
                        <select id="department" name="department">
                            <option value="IT">IT</option>
                            <option value="Sales">Sales</option>
                            <option value="Support">Support</option>
                        </select>
                    </div>
                </div>
                
                <div class="button-container">
                    <button type="submit">üîç –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL</button>
                    <button type="button" onclick="executeSQL()">‚ö° –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL</button>
                </div>
                
                <div style="margin-top: 20px; padding: 15px; background: #e9ecef; border-radius: 8px;">
                    <h4>üîê –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</h4>
                    <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> <span id="currentUser">admin</span></p>
                    <p><strong>–†–æ–ª—å:</strong> <span id="currentRole">admin (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)</span></p>
                    <p><strong>–û—Ç–¥–µ–ª:</strong> <span id="currentDepartment">IT</span></p>
                    <p><strong>–î–æ—Å—Ç—É–ø:</strong> –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º</p>
                    <div class="roles-grid">
                        <div class="role-card" data-role="admin" data-dept="IT">
                            <p class="role-title">üëë admin (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)</p>
                            <p class="role-desc">–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º</p>
                        </div>
                        <div class="role-card" data-role="manager" data-dept="Sales">
                            <p class="role-title">üë®‚Äçüíº manager (–ú–µ–Ω–µ–¥–∂–µ—Ä)</p>
                            <p class="role-desc">–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞</p>
                        </div>
                        <div class="role-card" data-role="user" data-dept="Support">
                            <p class="role-title">üë§ user (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)</p>
                            <p class="role-desc">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º</p>
                        </div>
                    </div>
                </div>
            </form>
            
            <div id="result" class="result" style="display: none;">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                <div id="resultContent"></div>
            </div>
        </div>

        <script>
            function setQuestion(text) {
                document.getElementById('question').value = text;
            }

            document.getElementById('sqlForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const question = document.getElementById('question').value;
                const role = document.getElementById('role').value;
                const department = document.getElementById('department').value;
                const resultDiv = document.getElementById('result');
                const resultContent = document.getElementById('resultContent');
                
                if (!question.trim()) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å');
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                resultDiv.style.display = 'block';
                resultDiv.className = 'result loading';
                resultContent.innerHTML = 'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SQL –∏ –ø–ª–∞–Ω –∑–∞–ø—Ä–æ—Å–∞...';
                
                try {
                    const formData = new FormData();
                    formData.append('question', question);
                    formData.append('role', role);
                    formData.append('department', department);
                    
                    const response = await fetch('/generate-sql', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        resultDiv.className = 'result success';
                        const sqlTemplate = (data.sql_template || '').trim();
                        const sqlCorrected = (data.sql_corrected || '').trim();
                        const sqlWithRoles = (data.sql_with_roles || data.final_sql || '').trim();
                        const sqlGenerated = (data.sql || '').trim();

                        let html = '';

                        // –ü–æ–∫–∞–∂–µ–º —à–∞–±–ª–æ–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ/–∏—Ç–æ–≥–æ–≤–æ–≥–æ
                        if (sqlTemplate && sqlTemplate !== sqlCorrected && sqlTemplate !== sqlWithRoles) {
                            html += `<h4>üìã SQL –®–∞–±–ª–æ–Ω (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç Vanna AI):</h4>`;
                            html += `<pre style="background: #e3f2fd; padding: 15px; border-radius: 5px; overflow-x: auto;">${sqlTemplate}</pre>`;
                        } else if (sqlGenerated && sqlGenerated !== sqlCorrected && sqlGenerated !== sqlWithRoles) {
                            html += `<h4>üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL</h4>`;
                            html += `<pre style="background: #e3f2fd; padding: 15px; border-radius: 5px; overflow-x: auto;">${sqlGenerated}</pre>`;
                        }

                        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ
                        if (sqlCorrected && sqlCorrected !== sqlWithRoles) {
                            html += `<h4>üîß SQL –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ Mock API):</h4>`;
                            html += `<pre style="background: #fff3e0; padding: 15px; border-radius: 5px; overflow-x: auto;">${sqlCorrected}</pre>`;
                        }

                        // SQL —Å —Ä–æ–ª–µ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        if (sqlWithRoles) {
                            html += `<h4>üîê SQL —Å —Ä–æ–ª–µ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:</h4>`;
                            html += `<pre style="background: #f3e5f5; padding: 15px; border-radius: 5px; overflow-x: auto;">${sqlWithRoles}</pre>`;
                        }

                        // –ü–ª–∞–Ω
                        html += `<h4>üß≠ –ü–ª–∞–Ω –∑–∞–ø—Ä–æ—Å–∞:</h4>`;
                        html += `<pre style=\"background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;\">${JSON.stringify(data.plan, null, 2)}</pre>`;

                        if (data.restrictions && data.restrictions.length) {
                            html += `<p><strong>–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> ${data.restrictions.join(', ')}</p>`;
                        }
                        html += `<p><strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> ${data.explanation}</p>`;
                        html += `<p><strong>–ê–≥–µ–Ω—Ç:</strong> ${data.agent_type}</p>`;

                        resultContent.innerHTML = html;
                    } else {
                        resultDiv.className = 'result error';
                        resultContent.innerHTML = `
                            <h4>‚ùå –û—à–∏–±–∫–∞:</h4>
                            <p>${data.error}</p>
                        `;
                    }
                } catch (error) {
                    resultDiv.className = 'result error';
                    resultContent.innerHTML = `
                        <h4>‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</h4>
                        <p>${error.message}</p>
                    `;
                }
            });
            
            async function executeSQL() {
                const question = document.getElementById('question').value;
                const role = document.getElementById('role').value;
                const department = document.getElementById('department').value;
                const resultDiv = document.getElementById('result');
                const resultContent = document.getElementById('resultContent');
                
                if (!question.trim()) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å');
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                resultDiv.style.display = 'block';
                resultDiv.className = 'result loading';
                resultContent.innerHTML = 'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SQL –∏ –≤—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å...';
                
                try {
                    const formData = new FormData();
                    formData.append('question', question);
                    formData.append('role', role);
                    formData.append('department', department);
                    
                    const response = await fetch('/execute-sql', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        resultDiv.className = 'result success';
                        
                        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        let tableHTML = '';
                        if (data.data && data.data.length > 0) {
                            tableHTML = '<h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:</h4>';
                            tableHTML += '<div style="overflow-x: auto; max-width: 100%; margin-top: 10px;">';
                            tableHTML += '<table border="1" style="width: 100%; border-collapse: collapse; min-width: 600px; font-size: 14px;">';
                            tableHTML += '<tr style="background-color: #f8f9fa;">';
                            data.columns.forEach(col => { 
                                tableHTML += `<th style="padding: 8px; text-align: left; white-space: nowrap; max-width: 200px; overflow: hidden; text-overflow: ellipsis;">${col}</th>`; 
                            });
                            tableHTML += '</tr>';
                            data.data.forEach(row => {
                                tableHTML += '<tr>';
                                data.columns.forEach(col => { 
                                    const value = row[col] || '';
                                    const displayValue = value.length > 50 ? value.substring(0, 50) + '...' : value;
                                    tableHTML += `<td style="padding: 8px; max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="${value}">${displayValue}</td>`; 
                                });
                                tableHTML += '</tr>';
                            });
                            tableHTML += '</table>';
                            tableHTML += '</div>';
                        }
                        
                        resultContent.innerHTML = `
                            <div style="display: grid; gap: 20px;">
                                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #28a745;">
                                    <h4 style="margin: 0 0 10px 0; color: #28a745;">‚úÖ SQL –∑–∞–ø—Ä–æ—Å</h4>
                                    <pre style="background: white; padding: 10px; border-radius: 4px; overflow-x: auto; margin: 0; font-size: 13px;">${data.sql}</pre>
                                </div>
                                
                                <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; border-left: 4px solid #2196f3;">
                                    <h4 style="margin: 0 0 10px 0; color: #2196f3;">üîê –§–∏–Ω–∞–ª—å–Ω—ã–π SQL (—Å —Ä–æ–ª–µ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏)</h4>
                                    <pre style="background: white; padding: 10px; border-radius: 4px; overflow-x: auto; margin: 0; font-size: 13px;">${data.final_sql}</pre>
                                </div>
                                
                                <div style="background: #fff3cd; padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107;">
                                    <h4 style="margin: 0 0 10px 0; color: #856404;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
                                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                                        <div><strong>–°—Ç—Ä–æ–∫:</strong> <span style="color: #28a745; font-weight: bold;">${data.row_count}</span></div>
                                        <div><strong>–í—Ä–µ–º—è:</strong> <span style="color: #007bff; font-weight: bold;">${data.execution_time.toFixed(3)}—Å</span></div>
                                        ${data.restrictions && data.restrictions.length ? `<div><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> <span style="color: #dc3545;">${data.restrictions.join(', ')}</span></div>` : ''}
                                    </div>
                                </div>
                                
                                ${tableHTML}
                                
                                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #6c757d;">
                                    <h4 style="margin: 0 0 10px 0; color: #6c757d;">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                                    <p style="margin: 5px 0;"><strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> ${data.explanation}</p>
                                    <p style="margin: 5px 0;"><strong>–ê–≥–µ–Ω—Ç:</strong> ${data.agent_type}</p>
                                </div>
                            </div>
                        `;
                    } else {
                        resultDiv.className = 'result error';
                        resultContent.innerHTML = `
                            <h4>‚ùå –û—à–∏–±–∫–∞:</h4>
                            <p>${data.error}</p>
                        `;
                    }
                } catch (error) {
                    resultDiv.className = 'result error';
                    resultContent.innerHTML = `
                        <h4>‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</h4>
                        <p>${error.message}</p>
                    `;
                }
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏/–æ—Ç–¥–µ–ª–∞
            const roleSelect = document.getElementById('role');
            const deptSelect = document.getElementById('department');
            const currentRole = document.getElementById('currentRole');
            const currentDept = document.getElementById('currentDepartment');
            roleSelect.addEventListener('change', () => {
                const map = { admin: 'admin (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)', manager: 'manager (–ú–µ–Ω–µ–¥–∂–µ—Ä)', user: 'user (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)' };
                currentRole.textContent = map[roleSelect.value] || roleSelect.value;
            });
            deptSelect.addEventListener('change', () => {
                currentDept.textContent = deptSelect.value;
            });

            // –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫
            document.querySelectorAll('.role-card').forEach(card => {
                card.addEventListener('click', () => {
                    const r = card.getAttribute('data-role');
                    const d = card.getAttribute('data-dept');
                    roleSelect.value = r;
                    deptSelect.value = d;
                    const map = { admin: 'admin (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)', manager: 'manager (–ú–µ–Ω–µ–¥–∂–µ—Ä)', user: 'user (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)' };
                    currentRole.textContent = map[r] || r;
                    currentDept.textContent = d;
                });
            });
        </script>
    </body>
    </html>
    """

@app.post("/generate-sql")
async def generate_sql(
    question: str = Form(...),
    role: str = Form("admin"),
    department: str = Form("IT")
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —á–µ—Ä–µ–∑ QueryService —Å KB"""
    global query_service
    
    try:
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º QueryService –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if query_service is None:
            query_service = get_query_service()
            if query_service is None:
                return JSONResponse(
                    status_code=500,
                    content={"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å QueryService"}
                )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL —á–µ—Ä–µ–∑ QueryService (—Å KB –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        import asyncio
        sql = await query_service.generate_sql(question, {})
        sql = extract_sql_from_text(sql)
        sql = normalize_sql_for_postgres(sql)

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è; –µ—Å–ª–∏ –Ω–µ SELECT ‚Äî –æ—Ç–¥–∞–¥–∏–º –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        # –†–æ–ª–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ Mock API
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQL –≤ –ø–ª–∞–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ UI)
        try:
            plan = sql_to_plan(sql)
        except Exception as conv_err:
            plan = {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω: {conv_err}"}

        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–æ–ª–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ Mock Customer API (–µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω)
        final_sql = None
        sql_template = sql
        restrictions = []
        decoded_sql = None
        try:
            async with httpx.AsyncClient(timeout=3.0) as client:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ø–æ—á–∫—É: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–õ–ê–ù –≤ Mock API
                resp = await client.post(
                    "http://localhost:8080/api/plan/execute",
                    json={
                        "plan": plan,
                        "user_context": {
                            "login": "a7a_head_department",
                            "role": "admin",
                            "department": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂"
                        },
                        "request_id": "simple_ui_demo_plan"
                    }
                )
                if resp.status_code == 200:
                    data = resp.json()
                    final_sql = data.get("final_sql")
                    decoded_sql = data.get("decoded_sql")
                    restrictions = data.get("restrictions_applied", [])
                else:
                    # –§–æ–ª–ª–±—ç–∫: —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å SQL‚ÜíMock API
                    resp2 = await client.post(
                        "http://localhost:8080/api/sql/execute",
                        json={
                            "sql_template": sql_template,
                            "user_context": {
                                "login": "a7a_head_department",
                                "role": "admin",
                                "department": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂"
                            },
                            "request_id": "simple_ui_demo_sql"
                        }
                    )
                    if resp2.status_code == 200:
                        data2 = resp2.json()
                        final_sql = data2.get("final_sql")
                        restrictions = data2.get("restrictions_applied", [])
        except Exception:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ Mock API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω; UI –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ sql+plan
            pass
        
        return JSONResponse(content={
            "success": True,
            "sql": sql,
            "plan": plan,
            "sql_template": sql_template,
            "final_sql": final_sql,
            "restrictions": restrictions,
            "explanation": "SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω QueryService —Å KB –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –ø–ª–∞–Ω –ø–æ—Å—Ç—Ä–æ–µ–Ω –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º SQL‚Üí–ü–ª–∞–Ω; –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ Mock API –ø–æ–∫–∞–∑–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π SQL —Å —Ä–æ–ª–µ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏",
            "agent_type": "QueryService —Å KB"
        })
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {e}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": str(e)}
        )

@app.post("/execute-sql")
async def execute_sql(
    question: str = Form(...),
    role: str = Form("admin"),
    department: str = Form("IT")
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    global query_service
    
    try:
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º QueryService –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if query_service is None:
            query_service = get_query_service()
            if query_service is None:
                return JSONResponse(
                    status_code=500,
                    content={"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å QueryService"}
                )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL —á–µ—Ä–µ–∑ QueryService
        import asyncio
        sql = await query_service.generate_sql(question, {})
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL: {sql}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º SQL –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å SQL)
        import re
        extracted = extract_sql_from_text(sql)
        if extracted and extracted != sql:
            sql = extracted
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π SQL: {sql}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SQL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        original_sql = sql
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQL –¥–ª—è PostgreSQL
        sql = normalize_sql_for_postgres(sql)

        # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not sql or not sql.strip().lower().startswith("select"):
            logger.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π SQL (–Ω–µ SELECT): {sql}")
            return JSONResponse(
                status_code=500,
                content={
                    "success": False,
                    "error": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –Ω–µ —É–¥–∞–ª–∞—Å—å: –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SELECT",
                    "sql_template": original_sql
                }
            )

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –∫–∞–≤—ã—á–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ public.
        sql = normalize_sql_for_postgres(sql)
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        sql = re.sub(r"\s+", " ", sql).strip()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º JOIN —Å –æ—Ç–¥–µ–ª–∞–º–∏ - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ LEFT JOIN –¥–ª—è NULL –∑–Ω–∞—á–µ–Ω–∏–π
        import re
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ JOIN —Å –æ—Ç–¥–µ–ª–∞–º–∏ –Ω–∞ LEFT JOIN
        sql = re.sub(r'JOIN\s+(eq_)?departments\s+(\w+)\s+ON', r'LEFT JOIN \1departments \2 ON', sql)
        sql = re.sub(r'JOIN\s+(eq_)?departments\s+ON', r'LEFT JOIN \1departments ON', sql)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è WHERE –¥–ª—è LEFT JOIN
        if 'LEFT JOIN eq_departments' in sql and 'ed.deleted = FALSE' in sql:
            sql = sql.replace('ed.deleted = FALSE', 'ed.deleted = FALSE OR ed.deleted IS NULL')
        if 'LEFT JOIN eq_departments' in sql and 'd.deleted = FALSE' in sql:
            sql = sql.replace('d.deleted = FALSE', 'd.deleted = FALSE OR d.deleted IS NULL')
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è WHERE –¥–ª—è LEFT JOIN - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É deleted –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
        if 'LEFT JOIN eq_departments' in sql:
            # –£–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏–µ d.deleted = FALSE –∏–∑ WHERE
            sql = sql.replace('AND d.deleted = FALSE', '')
            sql = sql.replace('AND ed.deleted = FALSE', '')
            sql = sql.replace('AND eqd.deleted = FALSE', '')
            # –î–æ–±–∞–≤–ª—è–µ–º COALESCE –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è NULL –æ—Ç–¥–µ–ª–æ–≤
            if 'd.name AS department_name' in sql:
                sql = sql.replace('d.name AS department_name', 'COALESCE(d.name, \'–ë–µ–∑ –æ—Ç–¥–µ–ª–∞\') AS department_name')
            if 'ed.name AS department_name' in sql:
                sql = sql.replace('ed.name AS department_name', 'COALESCE(ed.name, \'–ë–µ–∑ –æ—Ç–¥–µ–ª–∞\') AS department_name')
            if 'eqd.name AS department_name' in sql:
                sql = sql.replace('eqd.name AS department_name', 'COALESCE(eqd.name, \'–ë–µ–∑ –æ—Ç–¥–µ–ª–∞\') AS department_name')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ Mock Customer API
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SQL –≤ Mock API: {sql}")
            async with httpx.AsyncClient(timeout=10.0) as client:
                resp = await client.post(
                    "http://localhost:8080/api/sql/execute",
                    json={
                        "sql_template": sql,  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL
                        "user_context": {
                            "login": "a7a_head_department" if role == "admin" else ("a7a_manager" if role == "manager" else "user"),
                            "role": role,
                            "department": department
                        },
                        "request_id": "simple_ui_execute"
                    }
                )
                
                if resp.status_code == 200:
                    data = resp.json()
                    if data.get("success", False):
                        return JSONResponse(content={
                            "success": True,
                            "sql_template": original_sql,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SQL (–æ—Ç Vanna AI)
                            "sql_corrected": sql,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ Mock API)
                            "sql_with_roles": data.get("sql_with_roles", data.get("final_sql", sql)),  # SQL —Å —Ä–æ–ª—è–º–∏
                            "sql": data.get("sql_with_roles", data.get("final_sql", sql)),  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                            "final_sql": data.get("final_sql", sql),  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                            "data": data.get("data", []),
                            "columns": data.get("columns", []),
                            "row_count": data.get("row_count", 0),
                            "execution_time": data.get("execution_time", 0),
                            "restrictions": data.get("restrictions_applied", []),
                            "explanation": f"SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {data.get('row_count', 0)} –∑–∞–ø–∏—Å–µ–π.",
                            "agent_type": "QueryService —Å KB + Mock API"
                        })
                    else:
                        return JSONResponse(
                            status_code=500,
                            content={"success": False, "error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"}
                        )
                else:
                    error_text = resp.text
                    return JSONResponse(
                        status_code=500,
                        content={"success": False, "error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {resp.status_code} - {error_text}"}
                    )
        except Exception as api_error:
            logger.warning(f"Mock API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {api_error}")
            return JSONResponse(
                status_code=500,
                content={"success": False, "error": f"Mock API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {api_error}"}
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {e}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {str(e)}"}
        )

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    return {"status": "healthy", "agent": "Vanna AI + ProxyAPI + pgvector"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=3000)
