"""
–¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ—Å—Ç–æ–π HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è pipeline
"""

from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse
import httpx
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import httpx
import logging
import os
from typing import Optional, Dict
from src.vanna.vanna_pgvector_native import create_native_vanna_client
from src.utils.plan_sql_converter import sql_to_plan

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
web_app = FastAPI(
    title="NL‚ÜíSQL Web Interface",
    description="–¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NL_SQL_API_URL = "http://localhost:8000"
MOCK_CUSTOMER_API_URL = "http://localhost:8080"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–≥–æ Vanna AI –∞–≥–µ–Ω—Ç–∞
def get_vanna_agent():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ Vanna AI –∞–≥–µ–Ω—Ç–∞"""
    try:
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã —Å–Ω–∞—Ä—É–∂–∏ (–Ω–µ —Ö–∞—Ä–¥–∫–æ–¥–∏–º –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ)
        # PROXYAPI_KEY, PROXYAPI_BASE_URL, PROXYAPI_CHAT_MODEL
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        vanna = create_native_vanna_client(use_proxyapi=True)
        logger.info("‚úÖ –û–±—É—á–µ–Ω–Ω—ã–π Vanna AI –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return vanna
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vanna AI –∞–≥–µ–Ω—Ç–∞: {e}")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
vanna_agent = None

@web_app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>NL‚ÜíSQL –¢–µ—Å—Ç–æ–≤—ã–π –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å v2</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                background: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 {
                color: #333;
                text-align: center;
                margin-bottom: 30px;
            }
            .form-group {
                margin-bottom: 20px;
            }
            label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
                color: #555;
            }
            input, select, textarea {
                width: 100%;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 5px;
                font-size: 14px;
            }
            textarea {
                height: 100px;
                resize: vertical;
            }
            button {
                background-color: #007bff;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                margin-right: 10px;
            }
            button:hover {
                background-color: #0056b3;
            }
            .result {
                margin-top: 20px;
                padding: 15px;
                background-color: #f8f9fa;
                border-radius: 5px;
                border-left: 4px solid #007bff;
            }
            .error {
                border-left-color: #dc3545;
                background-color: #f8d7da;
            }
            .success {
                border-left-color: #28a745;
                background-color: #d4edda;
            }
            .loading {
                text-align: center;
                color: #666;
            }
            .user-context {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 15px;
                margin-bottom: 20px;
            }
            .api-status {
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
            }
            .status-indicator {
                padding: 5px 10px;
                border-radius: 3px;
                font-size: 12px;
                font-weight: bold;
            }
            .status-healthy {
                background-color: #d4edda;
                color: #155724;
            }
            .status-unhealthy {
                background-color: #f8d7da;
                color: #721c24;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ NL‚ÜíSQL –¢–µ—Å—Ç–æ–≤—ã–π –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</h1>
            
            <div class="api-status">
                <div>
                    <span>NL‚ÜíSQL API:</span>
                    <span id="nl-sql-status" class="status-indicator status-unhealthy">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span>
                </div>
                <div>
                    <span>Mock Customer API:</span>
                    <span id="customer-api-status" class="status-indicator status-unhealthy">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span>
                </div>
            </div>
            
            <form id="queryForm">
                <div class="user-context">
                    <div class="form-group">
                        <label for="user_id">ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                        <select id="user_id" name="user_id">
                            <option value="admin">admin (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)</option>
                            <option value="manager">manager (–ú–µ–Ω–µ–¥–∂–µ—Ä)</option>
                            <option value="user">user (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="role">–†–æ–ª—å:</label>
                        <select id="role" name="role">
                            <option value="admin">admin</option>
                            <option value="manager">manager</option>
                            <option value="user">user</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="question">–í–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:</label>
                    <textarea id="question" name="question" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?, –ü–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"></textarea>
                </div>

                <div class="form-group">
                    <label>–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</label>
                    <div style="display:flex; flex-wrap: wrap; gap: 8px;">
                        <button type="button" onclick="setQuestion('–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
                        <button type="button" onclick="setQuestion('–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?')">–°—á—ë—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</button>
                        <button type="button" onclick="setQuestion('–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')">–ü–æ—Ä—É—á–µ–Ω–∏—è (30–¥)</button>
                        <button type="button" onclick="setQuestion('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º')">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª–æ–≤</button>
                        <button type="button" onclick="setQuestion('–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ IT –æ—Ç–¥–µ–ª–∞')">–ê–∫—Ç–∏–≤–Ω—ã–µ IT</button>
                        <button type="button" onclick="setQuestion('–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')">–ü–ª–∞—Ç–µ–∂–∏ —Å–µ–≥–æ–¥–Ω—è</button>
                        <button type="button" onclick="setQuestion('–ü–æ—Ä—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ manager')">–ü–æ—Ä—É—á–µ–Ω–∏—è manager</button>
                        <button type="button" onclick="setQuestion('–°–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü —Å –ò–ù–ù')">–ë–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü—ã —Å –ò–ù–ù</button>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="department">–û—Ç–¥–µ–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
                    <input type="text" id="department" name="department" placeholder="IT, Sales, Support">
                </div>
                
                <button type="button" onclick="generateSQL()">üîç –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL</button>
                <button type="button" onclick="executeQuery()">‚ö° –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å</button>
                <button type="button" onclick="clearResults()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
            </form>
            
            <div id="result" class="result" style="display: none;">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                <div id="resultContent"></div>
            </div>
        </div>
        
        <script>
            function setQuestion(text) {
                document.getElementById('question').value = text;
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            window.onload = function() {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
                if ('caches' in window) {
                    caches.keys().then(function(names) {
                        for (let name of names) {
                            caches.delete(name);
                        }
                    });
                }
                checkAPIStatus();
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
                setQuestion('–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                // –ü–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–∑–¥–Ω–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞)
                setTimeout(checkAPIStatus, 1500);
                setInterval(checkAPIStatus, 10000);
                // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–¥–µ–ª–æ–≤
                loadRealUsersAndDepartments();
            };

            async function loadRealUsersAndDepartments() {
                try {
                    const [usersResp, depsResp] = await Promise.all([
                        fetch('http://localhost:8080/api/users/sample'),
                        fetch('http://localhost:8080/api/departments')
                    ]);
                    const users = (await usersResp.json()).users || [];
                    const deps = (await depsResp.json()).departments || [];
                    const userSel = document.getElementById('user_id');
                    const roleSel = document.getElementById('role');
                    const depInput = document.getElementById('department');
                    if (users.length > 0) {
                        userSel.innerHTML = '';
                        users.slice(0, 50).forEach(u => {
                            const opt = document.createElement('option');
                            opt.value = u.login;
                            opt.textContent = `${u.login} (${u.email || 'no-email'})`;
                            userSel.appendChild(opt);
                        });
                        // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å user
                        roleSel.value = 'user';
                    }
                    if (deps.length > 0) {
                        // –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞
                        depInput.value = deps[0].name || '';
                    }
                } catch (e) {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–æ—Ç–¥–µ–ª—ã:', e);
                }
            }
            
            async function checkAPIStatus() {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ NL‚ÜíSQL API
                try {
                    const response = await fetch('http://localhost:8000/health');
                    const data = await response.json();
                    document.getElementById('nl-sql-status').textContent = data.status === 'healthy' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—à–∏–±–∫–∞';
                    document.getElementById('nl-sql-status').className = 'status-indicator ' + (data.status === 'healthy' ? 'status-healthy' : 'status-unhealthy');
                } catch (error) {
                    document.getElementById('nl-sql-status').textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                    document.getElementById('nl-sql-status').className = 'status-indicator status-unhealthy';
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ Mock Customer API
                try {
                    const response = await fetch('http://localhost:8080/health?v=' + Date.now());
                    const data = await response.json();
                    document.getElementById('customer-api-status').textContent = data.status === 'healthy' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—à–∏–±–∫–∞';
                    document.getElementById('customer-api-status').className = 'status-indicator ' + (data.status === 'healthy' ? 'status-healthy' : 'status-unhealthy');
                } catch (error) {
                    document.getElementById('customer-api-status').textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                    document.getElementById('customer-api-status').className = 'status-indicator status-unhealthy';
                }
            }
            
            async function generateSQL() {
                const formData = new FormData(document.getElementById('queryForm'));
                const data = Object.fromEntries(formData);
                
                if (!data.question || !data.question.trim()) {
                    showResult('<h4>–û—à–∏–±–∫–∞:</h4><p>–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π SQL.</p>', 'error');
                    return;
                }
                
                showLoading();
                
                try {
                    const response = await fetch('/api/generate_chain', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ question: data.question })
                    });
                    const result = await response.json();
                    
                    if (response.ok && result.success) {
                        showResult(`
                            <h4>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:</h4>
                            <pre style="background: #f8f9fa; padding: 10px; border-radius: 5px; overflow-x: auto;">${result.sql}</pre>
                            <h4>–ü–ª–∞–Ω (SQL‚Üí–ü–ª–∞–Ω):</h4>
                            <pre style="background: #f8f9fa; padding: 10px; border-radius: 5px; overflow-x: auto;">${JSON.stringify(result.plan, null, 2)}</pre>
                            ${result.decoded_sql ? `<h4>–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –ø–ª–∞–Ω–∞ SQL:</h4><pre style=\"background:#f8f9fa;padding:10px;border-radius:5px;overflow-x:auto;\">${result.decoded_sql}</pre>` : ''}
                            <p style="margin-top:8px;color:#555;">–î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SQL —Å —Ä–æ–ª–µ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å¬ª.</p>
                        `, 'success');
                    } else {
                        showResult(`<h4>–û—à–∏–±–∫–∞:</h4><p>${result.error || result.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>`, 'error');
                    }
                } catch (error) {
                    showResult(`<h4>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h4><p>${error.message}</p>`, 'error');
                }
            }
            
            async function executeQuery() {
                const formData = new FormData(document.getElementById('queryForm'));
                const data = Object.fromEntries(formData);
                
                if (!data.question || !data.question.trim()) {
                    showResult('<h4>–û—à–∏–±–∫–∞:</h4><p>–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞.</p>', 'error');
                    return;
                }
                
                showLoading();
                
                try {
                    const response = await fetch('/api/execute_chain', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            question: data.question,
                            user_id: data.user_id,
                            role: data.role,
                            department: data.department
                        })
                    });
                    const result = await response.json();
                    
                    if (response.ok && result.success) {
                        let tableHTML = '';
                        if (result.data && result.data.length > 0) {
                            tableHTML = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:</h4>';
                            tableHTML += '<table border="1" style="width: 100%; border-collapse: collapse; margin-top: 10px;">';
                            tableHTML += '<tr style="background-color: #f8f9fa;">';
                            result.columns.forEach(col => { tableHTML += `<th style=\"padding: 8px; text-align: left;\">${col}</th>`; });
                            tableHTML += '</tr>';
                            result.data.forEach(row => {
                                tableHTML += '<tr>';
                                result.columns.forEach(col => { tableHTML += `<td style=\"padding: 8px;\">${row[col] || ''}</td>`; });
                                tableHTML += '</tr>';
                            });
                            tableHTML += '</table>';
                        }
                        
                        showResult(`
                            <h4>–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –ø–ª–∞–Ω–∞ SQL:</h4>
                            <pre style="background: #f8f9fa; padding: 10px; border-radius: 5px; overflow-x: auto;">${result.decoded_sql}</pre>
                            <h4>–§–∏–Ω–∞–ª—å–Ω—ã–π SQL (—Å —Ä–æ–ª–µ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏):</h4>
                            <pre style="background: #f8f9fa; padding: 10px; border-radius: 5px; overflow-x: auto;">${result.final_sql}</pre>
                            <p><strong>–°—Ç—Ä–æ–∫:</strong> ${result.row_count}</p>
                            <p><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${result.execution_time.toFixed(3)}—Å</p>
                            ${result.restrictions && result.restrictions.length ? `<p><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> ${result.restrictions.join(', ')}</p>` : ''}
                            ${tableHTML}
                        `, 'success');
                    } else {
                        showResult(`<h4>–û—à–∏–±–∫–∞:</h4><p>${result.error || result.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>`, 'error');
                    }
                } catch (error) {
                    showResult(`<h4>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h4><p>${error.message}</p>`, 'error');
                }
            }
            
            function showLoading() {
                document.getElementById('result').style.display = 'block';
                document.getElementById('result').className = 'result loading';
                document.getElementById('resultContent').innerHTML = '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...';
            }
            
            function showResult(content, type) {
                document.getElementById('result').style.display = 'block';
                document.getElementById('result').className = `result ${type}`;
                document.getElementById('resultContent').innerHTML = content;
            }
            
            function clearResults() {
                document.getElementById('result').style.display = 'none';
                document.getElementById('question').value = '';
            }
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è user_id –∏ role
            document.getElementById('user_id').addEventListener('change', function() {
                document.getElementById('role').value = this.value;
            });
        </script>
    </body>
    </html>
    """

@web_app.post("/api/generate_chain")
async def api_generate_chain(payload: Dict[str, str]):
    try:
        question = payload.get("question", "").strip()
        if not question:
            return JSONResponse(status_code=400, content={"success": False, "error": "question is required"})

        # –ü–æ–ª—É—á–µ–Ω–∏–µ SQL –æ—Ç Core API
        async with httpx.AsyncClient() as client:
            r = await client.post("http://localhost:8000/query", json={
                "question": question,
                "user_id": "web_ui",
                "role": "admin",
                "department": "IT",
                "context": {}
            })
            r.raise_for_status()
            sql_resp = r.json()
            sql = sql_resp.get("sql", "")

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
        plan = sql_to_plan(sql)

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≥–Ω–∞—Ç—å –ø–ª–∞–Ω —á–µ—Ä–µ–∑ Mock API (–±–µ–∑ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)
        decoded_sql = None
        try:
            async with httpx.AsyncClient() as client:
                r2 = await client.post("http://localhost:8080/api/plan/execute", json={
                    "plan": plan,
                    "user_context": {"user_id": "admin", "role": "admin", "department": "IT"},
                    "request_id": "web_ui_generate_chain"
                })
                if r2.status_code == 200:
                    decoded_sql = r2.json().get("decoded_sql")
        except Exception:
            pass

        return {"success": True, "sql": sql, "plan": plan, "decoded_sql": decoded_sql}
    except Exception as e:
        return JSONResponse(status_code=500, content={"success": False, "error": str(e)})


@web_app.post("/api/execute_chain")
async def api_execute_chain(payload: Dict[str, str]):
    try:
        question = payload.get("question", "").strip()
        user_id = payload.get("user_id", "user")
        role = payload.get("role", "user")
        department = payload.get("department", "Support")
        if not question:
            return JSONResponse(status_code=400, content={"success": False, "error": "question is required"})

        # –ü–æ–ª—É—á–µ–Ω–∏–µ SQL –æ—Ç Core API
        async with httpx.AsyncClient() as client:
            r = await client.post("http://localhost:8000/query", json={
                "question": question,
                "user_id": user_id,
                "role": role,
                "department": department,
                "context": {}
            })
            r.raise_for_status()
            sql_resp = r.json()
            sql = sql_resp.get("sql", "")

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
        plan = sql_to_plan(sql)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø–ª–∞—Ç–µ–∂–∏ –∏–ª–∏ –ø–ª–∞–Ω –±–µ–∑ —Ç–∞–±–ª–∏—Ü/–ø–∞–¥–∞–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL
        exec_resp = None
        async with httpx.AsyncClient() as client:
            try:
                if ('–ø–ª–∞—Ç–µ–∂' in question.lower() or 'payment' in question.lower()) or not plan.get("tables"):
                    raise RuntimeError("empty_plan_tables")
                r2 = await client.post("http://localhost:8080/api/plan/execute", json={
                    "plan": plan,
                    "user_context": {"user_id": user_id, "role": role, "department": department},
                    "request_id": "web_ui_execute_chain"
                })
                r2.raise_for_status()
                exec_resp = r2.json()
            except Exception:
                # –§–æ–ª–ª–±–µ–∫: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π SQL; –±—ã—Å—Ç—Ä—ã–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
                safe_sql = sql
                safe_sql = safe_sql.replace("amount_payment_rubles", "credit").replace("business_unit_id", "client_name")
                r3 = await client.post("http://localhost:8080/api/sql/execute", json={
                    "sql_template": safe_sql,
                    "user_context": {"user_id": user_id, "role": role, "department": department},
                    "request_id": "web_ui_execute_chain_sql"
                })
                r3.raise_for_status()
                j = r3.json()
                exec_resp = {
                    "decoded_sql": sql,
                    "final_sql": j.get("final_sql", safe_sql),
                    "data": j.get("data", []),
                    "columns": j.get("columns", []),
                    "row_count": j.get("row_count", 0),
                    "execution_time": j.get("execution_time", 0.0),
                    "restrictions_applied": j.get("restrictions", [])
                }

        return {
            "success": True,
            "decoded_sql": exec_resp.get("decoded_sql"),
            "final_sql": exec_resp.get("final_sql"),
            "data": exec_resp.get("data", []),
            "columns": exec_resp.get("columns", []),
            "row_count": exec_resp.get("row_count", 0),
            "execution_time": exec_resp.get("execution_time", 0.0),
            "restrictions": exec_resp.get("restrictions_applied", [])
        }
    except Exception as e:
        return JSONResponse(status_code=500, content={"success": False, "error": str(e)})

@web_app.get("/api/status")
async def get_api_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö API
    """
    status = {
        "nl_sql_api": {"status": "unknown", "url": NL_SQL_API_URL},
        "customer_api": {"status": "unknown", "url": MOCK_CUSTOMER_API_URL}
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ NL‚ÜíSQL API
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{NL_SQL_API_URL}/health", timeout=5.0)
            if response.status_code == 200:
                data = response.json()
                status["nl_sql_api"]["status"] = data.get("status", "unknown")
                status["nl_sql_api"]["components"] = data.get("components", {})
    except Exception as e:
        status["nl_sql_api"]["error"] = str(e)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Mock Customer API
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{MOCK_CUSTOMER_API_URL}/health", timeout=5.0)
            if response.status_code == 200:
                data = response.json()
                status["customer_api"]["status"] = data.get("status", "unknown")
    except Exception as e:
        status["customer_api"]["error"] = str(e)
    
    return status

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(web_app, host="0.0.0.0", port=3000)
