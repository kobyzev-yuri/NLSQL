#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç JavaDoc-—Å—Ç–∏–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
"""

import os
import sys
import ast
import re
from typing import Dict, List, Any
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

class DocGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.docs_dir = self.project_root / "docs"
        self.src_dir = self.project_root / "src"
        
    def generate_all_docs(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.docs_dir.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        self.generate_component_docs()
        self.generate_api_docs()
        self.generate_architecture_docs()
        self.generate_knowledge_base()
        
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    def generate_component_docs(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        components = {
            "simple_web_interface": {
                "file": "src/simple_web_interface.py",
                "title": "Simple Web Interface",
                "description": "–û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã"
            },
            "query_service": {
                "file": "src/services/query_service.py", 
                "title": "Query Service",
                "description": "–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤"
            },
            "vanna_integration": {
                "file": "src/vanna/vanna_pgvector_native.py",
                "title": "Vanna AI Integration", 
                "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Vanna AI –∏ pgvector"
            },
            "mock_api": {
                "file": "src/mock_customer_api.py",
                "title": "Mock Customer API",
                "description": "Mock API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏"
            }
        }
        
        for component_name, info in components.items():
            self.generate_component_doc(component_name, info)
            
    def generate_component_doc(self, component_name: str, info: Dict[str, str]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        file_path = self.project_root / info["file"]
        
        if not file_path.exists():
            print(f"‚ö†Ô∏è  –§–∞–π–ª {info['file']} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
            
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
        with open(file_path, 'r', encoding='utf-8') as f:
            source_code = f.read()
            
        # –ü–∞—Ä—Å–∏–º AST
        try:
            tree = ast.parse(source_code)
        except SyntaxError as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {info['file']}: {e}")
            return
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        doc_content = self.create_component_doc(component_name, info, tree, source_code)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        doc_file = self.docs_dir / f"{component_name.upper()}_DOCUMENTATION.md"
        with open(doc_file, 'w', encoding='utf-8') as f:
            f.write(doc_content)
            
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {doc_file}")
        
    def create_component_doc(self, component_name: str, info: Dict[str, str], 
                           tree: ast.AST, source_code: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
        classes = []
        functions = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef):
                classes.append(self.extract_class_info(node))
            elif isinstance(node, ast.FunctionDef) and not isinstance(node.parent, ast.ClassDef):
                functions.append(self.extract_function_info(node))
                
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        doc = f"""# {info['title']} - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## üìã –û–±–∑–æ—Ä

{info['description']}

**–§–∞–π–ª**: `{info['file']}`  
**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç**: {component_name}  
**–í–µ—Ä—Å–∏—è**: 1.0.0

---

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
- –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

---

## üîß API Reference

### –ö–ª–∞—Å—Å—ã

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö
        for class_info in classes:
            doc += f"""#### `{class_info['name']}`
```python
class {class_info['name']}:
    \"\"\"
    {class_info['docstring'] or '–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞'}
    \"\"\"
```

**–ú–µ—Ç–æ–¥—ã:**
"""
            for method in class_info['methods']:
                doc += f"- `{method['name']}()` - {method['docstring'] or '–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞'}\n"
            doc += "\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
        if functions:
            doc += "### –§—É–Ω–∫—Ü–∏–∏\n\n"
            for func_info in functions:
                doc += f"""#### `{func_info['name']}()`
```python
def {func_info['name']}({func_info['args']}):
    \"\"\"
    {func_info['docstring'] or '–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏'}
    \"\"\"
```

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        doc += """## üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
```python
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
component = Component()

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
result = component.main_function()
```

### –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
```python
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
config = {
    'param1': 'value1',
    'param2': 'value2'
}

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
component = Component(config)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
result = component.process_data()
```

---

## üîç –û—Ç–ª–∞–¥–∫–∞

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```python
import logging

logger = logging.getLogger(__name__)
logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
```python
try:
    result = component.risky_operation()
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞: {e}")
    raise
```

---

## üìä –ú–µ—Ç—Ä–∏–∫–∏

### –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: < 5 —Å–µ–∫—É–Ω–¥
- **–¢–æ—á–Ω–æ—Å—Ç—å**: > 80%
- **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å**: > 99%

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
```python
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
status = component.health_check()
print(f"–°—Ç–∞—Ç—É—Å: {status}")
```

---

**–í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏**: 1.0.0  
**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**: 2024-10-15  
**–ê–≤—Ç–æ—Ä**: NL‚ÜíSQL Team
"""
        
        return doc
        
    def extract_class_info(self, node: ast.ClassDef) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–µ"""
        methods = []
        
        for item in node.body:
            if isinstance(item, ast.FunctionDef):
                methods.append({
                    'name': item.name,
                    'docstring': ast.get_docstring(item),
                    'args': self.get_function_args(item)
                })
                
        return {
            'name': node.name,
            'docstring': ast.get_docstring(node),
            'methods': methods
        }
        
    def extract_function_info(self, node: ast.FunctionDef) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–∏"""
        return {
            'name': node.name,
            'docstring': ast.get_docstring(node),
            'args': self.get_function_args(node)
        }
        
    def get_function_args(self, node: ast.FunctionDef) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏"""
        args = []
        for arg in node.args.args:
            args.append(arg.arg)
        return ', '.join(args)
        
    def generate_api_docs(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API"""
        print("üì° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API...")
        
        # API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ FastAPI
        pass
        
    def generate_architecture_docs(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        print("üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∏–∞–≥—Ä–∞–º–º
        pass
        
    def generate_knowledge_base(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ –∫–æ–¥–∞
        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--project-root", default=".", help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--component", help="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = DocGenerator(args.project_root)
    
    if args.component:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        print(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è {args.component}...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        generator.generate_all_docs()

if __name__ == "__main__":
    main()


