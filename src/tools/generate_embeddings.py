#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ vanna_vectors
"""

import os
import sys
import asyncio
import asyncpg
import logging
from typing import List, Dict, Any
from openai import OpenAI

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

logger = logging.getLogger(__name__)

class EmbeddingGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è vanna_vectors"""
    
    def __init__(self, dsn: str, api_key: str, base_url: str = None):
        self.dsn = dsn
        self.client = OpenAI(
            api_key=api_key,
            base_url=base_url or "https://api.proxyapi.ru/openai/v1"
        )
        
    async def generate_embeddings(self, batch_size: int = 100, dry_run: bool = False):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑ embedding
        
        Args:
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            dry_run: –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = await asyncpg.connect(self.dsn)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            records = await conn.fetch("""
                SELECT id, content, content_type 
                FROM vanna_vectors 
                WHERE embedding IS NULL
                ORDER BY id
            """)
            
            total = len(records)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {total} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            
            if dry_run:
                logger.info("üîç DRY RUN - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:")
                for i, record in enumerate(records[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    logger.info(f"  {i+1}. ID={record['id']}, type={record['content_type']}, content={record['content'][:50]}...")
                if total > 10:
                    logger.info(f"  ... –∏ –µ—â–µ {total-10} –∑–∞–ø–∏—Å–µ–π")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            processed = 0
            for i in range(0, total, batch_size):
                batch = records[i:i + batch_size]
                logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {i//batch_size + 1}/{(total-1)//batch_size + 1} ({len(batch)} –∑–∞–ø–∏—Å–µ–π)")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –±–∞—Ç—á–∞
                embeddings = await self._generate_batch_embeddings(batch)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                await self._save_embeddings(conn, batch, embeddings)
                
                processed += len(batch)
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{total} –∑–∞–ø–∏—Å–µ–π")
            
            await conn.close()
            logger.info(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            raise
    
    async def _generate_batch_embeddings(self, batch: List[asyncpg.Record]) -> List[List[float]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –±–∞—Ç—á–∞ –∑–∞–ø–∏—Å–µ–π"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            texts = []
            for record in batch:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç NUL-–±–∞–π—Ç–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                clean_text = record['content'].replace('\x00', '').strip()
                if clean_text:
                    texts.append(clean_text)
                else:
                    texts.append("")  # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ OpenAI API
            response = self.client.embeddings.create(
                model="text-embedding-ada-002",
                input=texts
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            embeddings = [data.embedding for data in response.data]
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            return embeddings
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞—Ç—á–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            raise
    
    async def _save_embeddings(self, conn: asyncpg.Connection, batch: List[asyncpg.Record], embeddings: List[List[float]]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ –ë–î"""
        try:
            for record, embedding in zip(batch, embeddings):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è pgvector
                embedding_str = '[' + ','.join(map(str, embedding)) + ']'
                await conn.execute("""
                    UPDATE vanna_vectors 
                    SET embedding = $1::vector 
                    WHERE id = $2
                """, embedding_str, record['id'])
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ –ë–î")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            raise

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è vanna_vectors")
    parser.add_argument("--dsn", required=True, help="DSN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL")
    parser.add_argument("--api-key", required=True, help="OpenAI API –∫–ª—é—á")
    parser.add_argument("--batch-size", type=int, default=100, help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    parser.add_argument("--dry-run", action="store_true", help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = EmbeddingGenerator(
        args.dsn, 
        args.api_key,
        base_url="https://api.proxyapi.ru/openai/v1"
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    await generator.generate_embeddings(
        batch_size=args.batch_size,
        dry_run=args.dry_run
    )

if __name__ == "__main__":
    asyncio.run(main())
