"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: NL‚ÜíSQL API, Mock Customer API, Web Interface
"""

import subprocess
import time
import signal
import sys
import os
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NLSystemRunner:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self.processes = {}
        self.running = True
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        self.running = False
        self.stop_all_processes()
        sys.exit(0)
    
    def start_nl_sql_api(self):
        """
        –ó–∞–ø—É—Å–∫ NL‚ÜíSQL API —Å–µ—Ä–≤–µ—Ä–∞
        """
        logger.info("–ó–∞–ø—É—Å–∫ NL‚ÜíSQL API —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            process = subprocess.Popen([
                sys.executable, "-m", "uvicorn", 
                "src.api.main:app", 
                "--host", "0.0.0.0", 
                "--port", "8000",
                "--reload"
            ], cwd=Path(__file__).parent)
            
            self.processes["nl_sql_api"] = process
            logger.info("NL‚ÜíSQL API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ NL‚ÜíSQL API: {e}")
            return False
    
    def start_mock_customer_api(self):
        """
        –ó–∞–ø—É—Å–∫ Mock Customer API
        """
        logger.info("–ó–∞–ø—É—Å–∫ Mock Customer API...")
        try:
            process = subprocess.Popen([
                sys.executable, "-m", "uvicorn", 
                "src.mock_customer_api:mock_app", 
                "--host", "0.0.0.0", 
                "--port", "8080",
                "--reload"
            ], cwd=Path(__file__).parent)
            
            self.processes["mock_customer_api"] = process
            logger.info("Mock Customer API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Mock Customer API: {e}")
            return False
    
    def start_web_interface(self):
        """
        –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        try:
            process = subprocess.Popen([
                sys.executable, "-m", "uvicorn", 
                "src.web_interface:web_app", 
                "--host", "0.0.0.0", 
                "--port", "3000",
                "--reload"
            ], cwd=Path(__file__).parent)
            
            self.processes["web_interface"] = process
            logger.info("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return False
    
    def prepare_training_data(self):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Vanna AI
        """
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        try:
            from src.vanna.training_data_preparation import VannaTrainingDataPreparator
            
            preparator = VannaTrainingDataPreparator()
            preparator.save_training_data("./training_data")
            
            logger.info("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤ ./training_data/")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def start_all_services(self):
        """
        –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ NL‚ÜíSQL —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
        self.prepare_training_data()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        services = [
            ("NL‚ÜíSQL API", self.start_nl_sql_api),
            ("Mock Customer API", self.start_mock_customer_api),
            ("Web Interface", self.start_web_interface)
        ]
        
        started_services = []
        
        for service_name, start_func in services:
            if start_func():
                started_services.append(service_name)
                time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {service_name}")
        
        if started_services:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã: {', '.join(started_services)}")
            self.print_system_info()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
            return False
        
        return True
    
    def print_system_info(self):
        """
        –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        """
        print("\n" + "="*60)
        print("üéâ NL‚ÜíSQL –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê!")
        print("="*60)
        print("\nüì° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print("  ‚Ä¢ NL‚ÜíSQL API:        http://localhost:8000")
        print("  ‚Ä¢ Mock Customer API: http://localhost:8080") 
        print("  ‚Ä¢ Web Interface:     http://localhost:3000")
        print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("  ‚Ä¢ API Docs:          http://localhost:8000/docs")
        print("  ‚Ä¢ Mock API Docs:      http://localhost:8080/docs")
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print("  ‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:     http://localhost:3000")
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:  http://localhost:8000/health")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print("  ‚Ä¢ '–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'")
        print("  ‚Ä¢ '–°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ?'")
        print("  ‚Ä¢ '–ü–æ—Ä—É—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü'")
        print("\n‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60)
    
    def monitor_processes(self):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        """
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                for name, process in self.processes.items():
                    if process.poll() is not None:
                        logger.error(f"–ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                        self.running = False
                        break
                
                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                self.running = False
                break
    
    def stop_all_processes(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        """
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        for name, process in self.processes.items():
            try:
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.terminate()
                process.wait(timeout=10)
                logger.info(f"{name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                logger.warning(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.kill()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
        
        logger.info("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            if not self.start_all_services():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
                return False
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            self.monitor_processes()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            return False
        finally:
            self.stop_all_processes()
        
        return True

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("ü§ñ NL‚ÜíSQL System Runner")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import uvicorn
        import httpx
        import fastapi
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    runner = NLSystemRunner()
    return runner.run()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
