#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Vanna AI
"""

import sys
sys.path.append('src')

from src.vanna.vanna_pgvector_native import DocStructureVannaNative

def check_tables_simple():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü"""
    
    config = {
        'model': 'gpt-4o',
        'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
        'api_key': 'sk-xF20r7G4tq9ezBMNKIjCPvva2io4S8FV',
        'base_url': 'https://api.proxyapi.ru/openai/v1'
    }
    
    try:
        vanna = DocStructureVannaNative(config=config)
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü
        tables_query = "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"
        
        print("üìä –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        df = vanna.run_sql(tables_query)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(df)}")
        print("üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:")
        
        for table in df['table_name']:
            print(f"   - {table}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        priority_tables = [
            "equsers", "eq_departments", "eqgroups", "eqroles",
            "tbl_business_unit", "tbl_principal_assignment", 
            "tbl_incoming_payments", "tbl_accounts_document", "tbl_personal_account"
        ]
        
        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        found_count = 0
        
        for table in priority_tables:
            if table in df['table_name'].values:
                print(f"   ‚úÖ {table}")
                found_count += 1
            else:
                print(f"   ‚ùå {table}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {found_count}/{len(priority_tables)} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ")
        
        if found_count < len(priority_tables):
            print("üí° –ü—Ä–æ–±–ª–µ–º–∞: –Ω–µ –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("   1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü")
            print("   3. –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_tables_simple()
