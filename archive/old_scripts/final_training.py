#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—É—á–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞
"""

import sys
import json
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from src.vanna.vanna_pgvector_native import DocStructureVannaNative

class FinalTraining:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—É—á–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.vanna = DocStructureVannaNative(config=config)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü—ã
        self.priority_tables = [
            "equsers",                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            "eq_departments",             # –û—Ç–¥–µ–ª—ã
            "eqgroups",                   # –ì—Ä—É–ø–ø—ã
            "eqroles",                    # –†–æ–ª–∏
            "tbl_business_unit",          # –ö–ª–∏–µ–Ω—Ç—ã
            "tbl_principal_assignment",  # –ü–æ—Ä—É—á–µ–Ω–∏—è
            "tbl_incoming_payments",      # –ü–ª–∞—Ç–µ–∂–∏
            "tbl_accounts_document",      # –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            "tbl_personal_account"        # –õ–∏—á–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
        ]
    
    def train_on_schema(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î"""
        
        try:
            print("üîç –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            schema_query = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS"
            df_schema = self.vanna.run_sql(schema_query)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_schema)} –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Å—Ö–µ–º—ã")
            
            plan = self.vanna.get_training_plan_generic(df_schema)
            self.vanna.train(plan=plan)
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ: {e}")
            return False
    
    def train_on_sql_examples(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        
        try:
            print("üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            examples_file = Path("training_data/enhanced_sql_examples.json")
            if not examples_file.exists():
                print("‚ùå –§–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(examples_file, 'r', encoding='utf-8') as f:
                examples = json.load(f)
            
            print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ—Ä–µ
            success_count = 0
            for i, example in enumerate(examples, 1):
                try:
                    question = example['question']
                    sql = example['sql']
                    
                    # –û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                    self.vanna.train(
                        question=question,
                        sql=sql
                    )
                    
                    success_count += 1
                    
                    if i % 5 == 0:
                        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(examples)} ({i/len(examples)*100:.1f}%)")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ {i}: {e}")
            
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {len(examples) - success_count} –æ—à–∏–±–æ–∫")
            return success_count > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
            return False
    
    def test_agent_final(self) -> Dict[str, Any]:
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        
        print("üß™ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
        
        test_questions = [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤", 
            "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º",
            "–ü–æ—Ä—É—á–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            "–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"
        ]
        
        results = {}
        
        for question in test_questions:
            print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ Vanna AI
                sql = self.vanna.generate_sql(question)
                results[question] = {
                    "sql": sql,
                    "status": "success"
                }
                print(f"üí° SQL: {sql}")
                
            except Exception as e:
                results[question] = {
                    "sql": f"–û—à–∏–±–∫–∞: {e}",
                    "status": "error"
                }
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ NL‚ÜíSQL –∞–≥–µ–Ω—Ç–∞")
    print("=" * 60)
    print("üéØ –§–æ–∫—É—Å: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–ø—Ç–∞")
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ Vanna AI")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'model': 'gpt-4o',
        'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
        'api_key': 'sk-xF20r7G4tq9ezBMNKIjCPvva2io4S8FV',
        'base_url': 'https://api.proxyapi.ru/openai/v1'
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = FinalTraining(config)
        
        # –≠—Ç–∞–ø 1: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ
        print("\nüîç –≠—Ç–∞–ø 1: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î")
        if not trainer.train_on_schema():
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ")
            return
        
        # –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö
        print("\nüìö –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö")
        if not trainer.train_on_sql_examples():
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö")
            return
        
        # –≠—Ç–∞–ø 3: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüß™ –≠—Ç–∞–ø 3: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        results = trainer.test_agent_final()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("final_training_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ final_training_results.json")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = sum(1 for r in results.values() if r["status"] == "success")
        total_count = len(results)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}/{total_count}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {success_count/total_count:.2f}")
        
        if success_count > total_count * 0.7:
            print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –æ—Ç–ª–∏—á–Ω–æ–µ!")
        else:
            print("‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
