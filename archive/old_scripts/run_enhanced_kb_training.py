#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è KB –∞–≥–µ–Ω—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö–º–æ–¥–µ–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import os
import sys
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from src.vanna.enhanced_kb_agent import EnhancedKBAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_training_data() -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    training_data = {
        'examples': [],
        'documentation': []
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    examples_file = Path("training_data/enhanced_sql_examples.json")
    if examples_file.exists():
        try:
            with open(examples_file, 'r', encoding='utf-8') as f:
                examples_data = json.load(f)
                training_data['examples'] = examples_data.get('examples', [])
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(training_data['examples'])} –ø—Ä–∏–º–µ—Ä–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    docs_file = Path("training_data/documentation.txt")
    if docs_file.exists():
        try:
            with open(docs_file, 'r', encoding='utf-8') as f:
                training_data['documentation'] = f.read()
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
    
    return training_data

def test_agent(agent: EnhancedKBAgent) -> dict:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    test_questions = [
        "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤", 
        "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º",
        "–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
    ]
    
    results = {}
    
    logger.info("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...")
    
    for question in test_questions:
        logger.info(f"‚ùì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: '{question}'")
        
        try:
            result = agent.generate_sql(question)
            results[question] = result
            
            if result['success']:
                logger.info(f"‚úÖ –£—Å–ø–µ—Ö: {result['sql'][:50]}...")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results[question] = {
                'success': False,
                'error': str(e)
            }
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è KB –∞–≥–µ–Ω—Ç–∞")
    logger.info("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ KB –∞–≥–µ–Ω—Ç–∞...")
        agent = EnhancedKBAgent()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞...")
        health = agent.health_check()
        logger.info(f"–ó–¥–æ—Ä–æ–≤—å–µ: {health}")
        
        if not health.get('overall', False):
            logger.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return
        
        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        logger.info("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        training_data = load_training_data()
        
        # 4. –û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        logger.info("üéì –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è...")
        training_success = agent.train_agent(training_data)
        
        if not training_success:
            logger.error("‚ùå –û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return
        
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
        test_results = test_agent(agent)
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = "enhanced_kb_training_results.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump({
                'training_success': training_success,
                'test_results': test_results,
                'health': health,
                'statistics': agent.get_statistics()
            }, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        
        # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = sum(1 for r in test_results.values() if r.get('success', False))
        total_count = len(test_results)
        
        logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}/{total_count}")
        logger.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {success_count/total_count:.2f}")
        
        if success_count >= total_count * 0.8:
            logger.info("üéâ –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        elif success_count >= total_count * 0.6:
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
        else:
            logger.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
