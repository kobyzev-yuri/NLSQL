#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import sys
import json
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from src.vanna.vanna_pgvector_native import DocStructureVannaNative

class FixedContextTraining:
    """–û–±—É—á–µ–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.vanna = DocStructureVannaNative(config=config)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü—ã
        self.priority_tables = [
            "equsers",                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            "eq_departments",             # –û—Ç–¥–µ–ª—ã
            "eqgroups",                   # –ì—Ä—É–ø–ø—ã
            "eqroles",                    # –†–æ–ª–∏
            "tbl_business_unit",          # –ö–ª–∏–µ–Ω—Ç—ã
            "tbl_principal_assignment",  # –ü–æ—Ä—É—á–µ–Ω–∏—è
            "tbl_incoming_payments",      # –ü–ª–∞—Ç–µ–∂–∏
            "tbl_accounts_document",      # –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            "tbl_personal_account"        # –õ–∏—á–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
        ]
    
    def train_on_schema(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î"""
        
        try:
            print("üîç –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            schema_query = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS"
            df_schema = self.vanna.run_sql(schema_query)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_schema)} –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Å—Ö–µ–º—ã")
            
            plan = self.vanna.get_training_plan_generic(df_schema)
            self.vanna.train(plan=plan)
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ: {e}")
            return False
    
    def train_on_sql_examples(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        
        try:
            print("üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            examples_file = Path("training_data/enhanced_sql_examples.json")
            if not examples_file.exists():
                print("‚ùå –§–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(examples_file, 'r', encoding='utf-8') as f:
                examples = json.load(f)
            
            print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ—Ä–µ
            success_count = 0
            for i, example in enumerate(examples, 1):
                try:
                    question = example['question']
                    sql = example['sql']
                    
                    # –û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                    self.vanna.train(
                        question=question,
                        sql=sql
                    )
                    
                    success_count += 1
                    
                    if i % 5 == 0:
                        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(examples)} ({i/len(examples)*100:.1f}%)")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ {i}: {e}")
            
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {len(examples) - success_count} –æ—à–∏–±–æ–∫")
            return success_count > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
            return False
    
    def test_agent_with_fixed_context(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")
        
        test_questions = [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤", 
            "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º",
            "–ü–æ—Ä—É—á–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            "–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"
        ]
        
        results = {}
        
        for question in test_questions:
            print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º SQL —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                sql = self.get_sql_with_fixed_context(question)
                results[question] = {
                    "sql": sql,
                    "status": "success"
                }
                print(f"üí° SQL: {sql}")
                
            except Exception as e:
                results[question] = {
                    "sql": f"–û—à–∏–±–∫–∞: {e}",
                    "status": "error"
                }
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return results
    
    def get_sql_with_fixed_context(self, question: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ SQL —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞–º–∏
        context_tables = []
        
        for table in self.priority_tables:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
                table_info = self.get_table_info(table)
                if table_info:
                    context_tables.append(table_info)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ {table}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = "\n\n".join(context_tables)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        prompt = f"""
You are a postgresql expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions.

===Tables

===Additional Context

{context}

===Response Guidelines
1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question.
2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql
3. If the provided context is insufficient, please explain why it can't be generated.
4. Please use the most relevant table(s).
5. If the question has been asked and answered before, please repeat the answer exactly as it was given before.
6. Ensure that the output SQL is postgresql-compliant and executable, and free of syntax errors.
"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL
        response = self.vanna.generate_sql(prompt, question)
        return response
    
    def get_table_info(self, table_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ"""
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
            query = f"""
            SELECT 
                column_name,
                data_type,
                is_nullable,
                column_default,
                character_maximum_length
            FROM information_schema.columns 
            WHERE table_name = '{table_name}'
            AND table_schema = 'public'
            ORDER BY ordinal_position
            """
            
            df = self.vanna.run_sql(query)
            
            if df.empty:
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            columns_info = []
            for _, row in df.iterrows():
                col_info = f"- {row['column_name']}: {row['data_type']}"
                if row['is_nullable'] == 'NO':
                    col_info += " (NOT NULL)"
                if row['character_maximum_length']:
                    col_info += f"({row['character_maximum_length']})"
                columns_info.append(col_info)
            
            table_info = f"–¢–∞–±–ª–∏—Ü–∞ {table_name}:\n–ö–æ–ª–æ–Ω–∫–∏: {', '.join(df['column_name'].tolist())}\n" + "\n".join(columns_info)
            
            return table_info
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}")
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è NL‚ÜíSQL –∞–≥–µ–Ω—Ç–∞")
    print("=" * 60)
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("üéØ –§–æ–∫—É—Å: –ë–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü—ã –≤–º–µ—Å—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'model': 'gpt-4o',
        'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
        'api_key': 'sk-xF20r7G4tq9ezBMNKIjCPvva2io4S8FV',
        'base_url': 'https://api.proxyapi.ru/openai/v1'
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = FixedContextTraining(config)
        
        # –≠—Ç–∞–ø 1: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ
        print("\nüîç –≠—Ç–∞–ø 1: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ö–µ–º–µ –ë–î")
        if not trainer.train_on_schema():
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ö–µ–º–µ")
            return
        
        # –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö
        print("\nüìö –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ SQL –ø—Ä–∏–º–µ—Ä–∞—Ö")
        if not trainer.train_on_sql_examples():
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö")
            return
        
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        print("\nüß™ –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
        results = trainer.test_agent_with_fixed_context()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("fixed_context_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ fixed_context_results.json")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = sum(1 for r in results.values() if r["status"] == "success")
        total_count = len(results)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}/{total_count}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {success_count/total_count:.2f}")
        
        if success_count > total_count * 0.7:
            print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL —É–ª—É—á—à–∏–ª–æ—Å—å!")
        else:
            print("‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL —Ç—Ä–µ–±—É–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
