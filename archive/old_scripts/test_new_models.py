#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: sqlcoder:latest –∏ phi3
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

def test_new_models():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    
    print("üöÄ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: sqlcoder:latest –∏ phi3")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models_to_test = [
        "sqlcoder:latest",
        "phi3:latest",  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è phi3 –º–æ–¥–µ–ª–∏
    ]
    
    question = "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    for model_name in models_to_test:
        print(f"\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {model_name}...")
        print("-" * 40)
        
        try:
            from src.vanna.vanna_pgvector_native import DocStructureVannaNative
            
            config = {
                'model': model_name,
                'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
                'api_key': 'ollama',
                'base_url': 'http://localhost:11434/v1'
            }
            
            print(f"üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º {model_name}...")
            start_time = time.time()
            vanna = DocStructureVannaNative(config)
            init_time = time.time()
            print(f"‚úÖ {model_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {init_time - start_time:.2f} —Å–µ–∫")
            
            print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            print("üì§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL...")
            start_time = time.time()
            sql = vanna.generate_sql(question)
            end_time = time.time()
            print(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫")
            print(f"üí° SQL: {sql}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ SQL
            if "equsers" in sql.lower():
                print("‚úÖ SQL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É equsers")
                quality = "–û—Ç–ª–∏—á–Ω–æ"
            elif "users" in sql.lower():
                print("‚ö†Ô∏è SQL —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É users (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                quality = "–°—Ä–µ–¥–Ω–µ"
            else:
                print("‚ùå SQL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü")
                quality = "–ü–ª–æ—Ö–æ"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
            print(f"\n‚ùì –í–æ–ø—Ä–æ—Å 2: –°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤")
            start_time = time.time()
            sql2 = vanna.generate_sql("–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤")
            end_time = time.time()
            print(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫")
            print(f"üí° SQL: {sql2}")
            
            if "eq_departments" in sql2.lower():
                print("‚úÖ SQL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É eq_departments")
                quality2 = "–û—Ç–ª–∏—á–Ω–æ"
            elif "department" in sql2.lower():
                print("‚ö†Ô∏è SQL —Å–æ–¥–µ—Ä–∂–∏—Ç department (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                quality2 = "–°—Ä–µ–¥–Ω–µ"
            else:
                print("‚ùå SQL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É eq_departments")
                quality2 = "–ü–ª–æ—Ö–æ"
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç {model_name}:")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ SQL: {quality} / {quality2}")
            print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {end_time - start_time:.2f} —Å–µ–∫")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å {model_name}: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\nüèÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_new_models()
