#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Qwen2.5-coder:1.5b (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

def test_fast_qwen():
    """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π Qwen –º–æ–¥–µ–ª–∏"""
    
    print("üöÄ –¢–µ—Å—Ç Qwen2.5-coder:1.5b (–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)")
    print("=" * 50)
    
    try:
        from src.vanna.vanna_pgvector_native import DocStructureVannaNative
        
        config = {
            'model': 'qwen2.5-coder:1.5b',  # –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
            'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
            'api_key': 'ollama',
            'base_url': 'http://localhost:11434/v1'
        }
        
        print("üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Vanna AI...")
        start_time = time.time()
        vanna = DocStructureVannaNative(config)
        init_time = time.time()
        print(f"‚úÖ Vanna AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {init_time - start_time:.2f} —Å–µ–∫")
        
        # –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
        question = "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {question}")
        
        print("üì§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL...")
        start_time = time.time()
        sql = vanna.generate_sql(question)
        end_time = time.time()
        print(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫")
        print(f"üí° SQL: {sql}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ SQL
        if "equsers" in sql.lower():
            print("‚úÖ SQL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É equsers")
        else:
            print("‚ùå SQL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É equsers")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_fast_qwen()
