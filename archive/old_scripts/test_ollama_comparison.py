#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ GPT-4o –∏ Ollama Llama 3.1 –¥–ª—è NL‚ÜíSQL –∞–≥–µ–Ω—Ç–∞
"""

import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from src.vanna.vanna_pgvector_native import DocStructureVannaNative

class OllamaFixedContextVanna(DocStructureVannaNative):
    """
    Vanna AI —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è Ollama
    """
    
    def __init__(self, config):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Ollama
        config['model'] = 'llama3:latest'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        config['base_url'] = 'http://localhost:11434/v1'  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è Ollama
        config['api_key'] = 'ollama'
        
        super().__init__(config)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü—ã
        self.priority_tables = [
            "equsers",                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            "eq_departments",             # –û—Ç–¥–µ–ª—ã
            "eqgroups",                   # –ì—Ä—É–ø–ø—ã
            "eqroles",                    # –†–æ–ª–∏
            "tbl_business_unit",          # –ö–ª–∏–µ–Ω—Ç—ã
            "tbl_principal_assignment",  # –ü–æ—Ä—É—á–µ–Ω–∏—è
            "tbl_incoming_payments",      # –ü–ª–∞—Ç–µ–∂–∏
            "tbl_accounts_document",      # –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            "tbl_personal_account"        # –õ–∏—á–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
        ]
    
    def get_related_ddl(self, question: str, **kwargs):
        """
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è DDL —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü
        """
        try:
            ddl_list = []
            
            for table in self.priority_tables:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                    ddl_query = f"""
                    SELECT 
                        table_name,
                        column_name,
                        data_type,
                        is_nullable,
                        column_default,
                        character_maximum_length
                    FROM information_schema.columns 
                    WHERE table_name = '{table}'
                    AND table_schema = 'public'
                    ORDER BY ordinal_position
                    """
                    
                    df = self.run_sql(ddl_query)
                    
                    if not df.empty:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                        table_ddl = f"–¢–∞–±–ª–∏—Ü–∞ {table}:\n"
                        table_ddl += f"–ö–æ–ª–æ–Ω–∫–∏: {', '.join(df['column_name'].tolist())}\n"
                        
                        for _, row in df.iterrows():
                            col_name = row['column_name']
                            data_type = row['data_type']
                            is_nullable = row['is_nullable']
                            
                            col_info = f"- {col_name}: {data_type}"
                            if is_nullable == 'NO':
                                col_info += " (NOT NULL)"
                            if row['character_maximum_length']:
                                col_info += f"({row['character_maximum_length']})"
                            table_ddl += col_info + "\n"
                        
                        ddl_list.append(table_ddl)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
                    continue
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ddl_list)} DDL –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
            return ddl_list
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DDL: {e}")
            return []
    
    def generate_sql(self, question: str) -> str:
        """
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            ddl_list = self.get_related_ddl(question)
            docs_list = self.get_related_documentation(question)
            qa_list = self.get_similar_question_sql(question)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_parts = []
            
            if ddl_list:
                context_parts.append("\n".join(ddl_list))
            
            if docs_list:
                context_parts.append("\n".join(docs_list))
            
            if qa_list:
                context_parts.append("\n".join(qa_list))
            
            context = "\n\n".join(context_parts)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Ollama
            prompt = f"""
You are a postgresql expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions.

===Tables

===Additional Context

{context}

===Response Guidelines
1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question.
2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql
3. If the provided context is insufficient, please explain why it can't be generated.
4. Please use the most relevant table(s).
5. If the question has been asked and answered before, please repeat the answer exactly as it was given before.
6. Ensure that the output SQL is postgresql-compliant and executable, and free of syntax errors.
"""
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Vanna AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL
            return super().generate_sql(question)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {e}")
            raise

def test_ollama_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ GPT-4o –∏ Ollama Llama 3.1"""
    
    print("üöÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ GPT-4o –∏ Ollama Llama 3.1")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤", 
        "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º"
    ]
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è GPT-4o
    gpt4_config = {
        'model': 'gpt-4o',
        'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
        'api_key': 'sk-xF20r7G4tq9ezBMNKIjCPvva2io4S8FV',
        'base_url': 'https://api.proxyapi.ru/openai/v1'
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Ollama
    ollama_config = {
        'model': 'llama3:latest',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
        'api_key': 'ollama',
        'base_url': 'http://localhost:11434/v1'  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è Ollama
    }
    
    results = {
        'gpt4o': {},
        'ollama': {}
    }
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GPT-4o
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT-4o...")
        from test_context_fix import FixedContextVanna
        
        gpt4_vanna = FixedContextVanna(gpt4_config)
        
        for question in test_questions:
            print(f"\n‚ùì GPT-4o: {question}")
            try:
                sql = gpt4_vanna.generate_sql(question)
                results['gpt4o'][question] = {
                    'sql': sql,
                    'status': 'success'
                }
                print(f"üí° SQL: {sql}")
            except Exception as e:
                results['gpt4o'][question] = {
                    'sql': f"–û—à–∏–±–∫–∞: {e}",
                    'status': 'error'
                }
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ollama
        print("\nü¶ô –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama Llama 3.1...")
        
        ollama_vanna = OllamaFixedContextVanna(ollama_config)
        
        for question in test_questions:
            print(f"\n‚ùì Ollama: {question}")
            try:
                sql = ollama_vanna.generate_sql(question)
                results['ollama'][question] = {
                    'sql': sql,
                    'status': 'success'
                }
                print(f"üí° SQL: {sql}")
            except Exception as e:
                results['ollama'][question] = {
                    'sql': f"–û—à–∏–±–∫–∞: {e}",
                    'status': 'error'
                }
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("ollama_comparison_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ollama_comparison_results.json")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        gpt4_success = sum(1 for r in results['gpt4o'].values() if r["status"] == "success")
        ollama_success = sum(1 for r in results['ollama'].values() if r["status"] == "success")
        total = len(test_questions)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
        print(f"   GPT-4o: {gpt4_success}/{total} ({gpt4_success/total:.2f})")
        print(f"   Ollama: {ollama_success}/{total} ({ollama_success/total:.2f})")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:")
        for question in test_questions:
            gpt4_result = results['gpt4o'][question]
            ollama_result = results['ollama'][question]
            
            print(f"\n‚ùì {question}")
            print(f"   GPT-4o: {gpt4_result['status']} - {gpt4_result['sql'][:100]}...")
            print(f"   Ollama: {ollama_result['status']} - {ollama_result['sql'][:100]}...")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_ollama_comparison()
