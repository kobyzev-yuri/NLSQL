#!/usr/bin/env python3
"""
–î–µ–±–∞–≥ —Ç–µ—Å—Ç Qwen –º–æ–¥–µ–ª–µ–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

def debug_test_qwen():
    """–î–µ–±–∞–≥ —Ç–µ—Å—Ç Qwen –º–æ–¥–µ–ª–µ–π"""
    
    print("üöÄ –î–µ–±–∞–≥ —Ç–µ—Å—Ç Qwen –º–æ–¥–µ–ª–µ–π")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
    print("\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama...")
    try:
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        models = response.json().get('models', [])
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {[m['name'] for m in models]}")
    except Exception as e:
        print(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Ollama
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Ollama...")
    try:
        import requests
        data = {
            "model": "qwen3:8b",
            "prompt": "Hello",
            "stream": False
        }
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        start_time = time.time()
        response = requests.post("http://localhost:11434/api/generate", 
                                json=data, timeout=30)
        end_time = time.time()
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"üí¨ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {result.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:100]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Vanna AI
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º Vanna AI...")
    try:
        from src.vanna.vanna_pgvector_native import DocStructureVannaNative
        
        config = {
            'model': 'qwen3:8b',
            'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
            'api_key': 'ollama',
            'base_url': 'http://localhost:11434/v1'
        }
        
        print("üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Vanna AI...")
        start_time = time.time()
        vanna = DocStructureVannaNative(config)
        init_time = time.time()
        print(f"‚úÖ Vanna AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {init_time - start_time:.2f} —Å–µ–∫")
        
        print("üì§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL...")
        start_time = time.time()
        sql = vanna.generate_sql("–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        end_time = time.time()
        print(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫: {sql}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Vanna AI: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_test_qwen()
