#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
"""

import sys
import time
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

class ModelTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.results = {}
        self.test_questions = [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤",
            "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º"
        ]
        
    def test_model(self, model_name, config):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        print(f"\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {model_name}...")
        print("=" * 50)
        
        model_results = {
            'model': model_name,
            'config': config,
            'questions': {},
            'total_time': 0,
            'success_rate': 0,
            'quality_score': 0
        }
        
        try:
            from src.vanna.vanna_pgvector_native import DocStructureVannaNative
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            print(f"üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º {model_name}...")
            start_time = time.time()
            vanna = DocStructureVannaNative(config)
            init_time = time.time()
            print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {init_time - start_time:.2f} —Å–µ–∫")
            
            success_count = 0
            total_quality = 0
            
            for i, question in enumerate(self.test_questions, 1):
                print(f"\n‚ùì –í–æ–ø—Ä–æ—Å {i}: {question}")
                
                try:
                    start_time = time.time()
                    sql = vanna.generate_sql(question)
                    end_time = time.time()
                    
                    response_time = end_time - start_time
                    model_results['total_time'] += response_time
                    
                    print(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {response_time:.2f} —Å–µ–∫")
                    print(f"üí° SQL: {sql}")
                    
                    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ SQL
                    quality = self.analyze_sql_quality(question, sql)
                    total_quality += quality
                    
                    model_results['questions'][question] = {
                        'sql': sql,
                        'time': response_time,
                        'quality': quality,
                        'status': 'success'
                    }
                    
                    success_count += 1
                    print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality}/10")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    model_results['questions'][question] = {
                        'sql': f"–û—à–∏–±–∫–∞: {e}",
                        'time': 0,
                        'quality': 0,
                        'status': 'error'
                    }
            
            # –ü–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            model_results['success_rate'] = success_count / len(self.test_questions)
            model_results['quality_score'] = total_quality / len(self.test_questions) if success_count > 0 else 0
            model_results['avg_time'] = model_results['total_time'] / len(self.test_questions)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã {model_name}:")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {model_results['success_rate']:.2f}")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {model_results['quality_score']:.2f}/10")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {model_results['avg_time']:.2f} —Å–µ–∫")
            
            return model_results
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å {model_name}: {e}")
            return {
                'model': model_name,
                'error': str(e),
                'success_rate': 0,
                'quality_score': 0,
                'avg_time': 0
            }
    
    def analyze_sql_quality(self, question, sql):
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        quality = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        if "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª" in question.lower():
            if "equsers" in sql.lower():
                quality += 4
            elif "users" in sql.lower():
                quality += 2
        
        elif "–æ—Ç–¥–µ–ª" in question.lower():
            if "eq_departments" in sql.lower():
                quality += 4
            elif "department" in sql.lower():
                quality += 2
        
        elif "–∫–ª–∏–µ–Ω—Ç" in question.lower():
            if "tbl_business_unit" in sql.lower():
                quality += 4
            elif "client" in sql.lower() or "customer" in sql.lower():
                quality += 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQL
        if sql.strip().upper().startswith('SELECT'):
            quality += 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WHERE –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if 'WHERE' in sql.upper() and 'deleted' in sql.lower():
            quality += 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JOIN –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if "–ø–æ –æ—Ç–¥–µ–ª–∞–º" in question.lower() and 'JOIN' in sql.upper():
            quality += 2
        
        return min(quality, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 –±–∞–ª–ª–æ–≤
    
    def run_comparison(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ LLM –º–æ–¥–µ–ª–µ–π")
        print("=" * 60)
        print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
        models_config = {
            'GPT-4o': {
                'model': 'gpt-4o',
                'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
                'api_key': 'sk-xF20r7G4tq9ezBMNKIjCPvva2io4S8FV',
                'base_url': 'https://api.proxyapi.ru/openai/v1'
            },
            'Ollama Llama 3': {
                'model': 'llama3:latest',
                'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
                'api_key': 'ollama',
                'base_url': 'http://localhost:11434/v1'
            },
            'Qwen2.5:1.5b': {
                'model': 'qwen2.5:1.5b',
                'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
                'api_key': 'ollama',
                'base_url': 'http://localhost:11434/v1'
            },
            'SQLCoder:latest': {
                'model': 'sqlcoder:latest',
                'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
                'api_key': 'ollama',
                'base_url': 'http://localhost:11434/v1'
            },
            'Phi3:latest': {
                'model': 'phi3:latest',
                'database_url': 'postgresql://postgres:1234@localhost:5432/test_docstructure',
                'api_key': 'ollama',
                'base_url': 'http://localhost:11434/v1'
            }
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
        for model_name, config in models_config.items():
            try:
                result = self.test_model(model_name, config)
                self.results[model_name] = result
            except Exception as e:
                print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {model_name}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        self.print_ranking()
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"model_comparison_results_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def print_ranking(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ô–¢–ò–ù–ì –ú–û–î–ï–õ–ï–ô")
        print("=" * 60)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        ranking = []
        for model_name, result in self.results.items():
            if 'error' not in result:
                score = result['quality_score'] * result['success_rate']
                ranking.append((model_name, score, result))
        
        ranking.sort(key=lambda x: x[1], reverse=True)
        
        for i, (model_name, score, result) in enumerate(ranking, 1):
            print(f"{i}. {model_name}")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']:.2f}/10")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['success_rate']:.2f}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {result['avg_time']:.2f} —Å–µ–∫")
            print(f"   –û–±—â–∏–π –±–∞–ª–ª: {score:.2f}")
            print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ModelTester()
    tester.run_comparison()

if __name__ == "__main__":
    main()
