#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –ø–ª–∞–Ω–æ–≤
"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('src')

from src.utils.plan_sql_converter import plan_to_sql, sql_to_plan


def test_plan_to_sql():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –≤ SQL"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–ª–∞–Ω ‚Üí SQL")
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω
    simple_plan = {
        "tables": ["tbl_business_unit"],
        "fields": ["business_unit_name", "inn", "region"],
        "conditions": [
            {"field": "region", "operator": "=", "value": "–ú–æ—Å–∫–≤–∞"}
        ],
        "order_by": ["business_unit_name"]
    }
    
    try:
        sql = plan_to_sql(simple_plan)
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω: {sql}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # –°–ª–æ–∂–Ω—ã–π –ø–ª–∞–Ω —Å JOIN
    complex_plan = {
        "tables": ["tbl_principal_assignment", "tbl_business_unit"],
        "fields": ["pa.assignment_number", "pa.assignment_date", "pa.amount"],
        "joins": [
            {"table": "tbl_business_unit", "on": "pa.business_unit_id = bu.id", "type": "JOIN"}
        ],
        "conditions": [
            {"field": "pa.amount", "operator": ">", "value": "1000000"}
        ],
        "order_by": ["pa.amount DESC"]
    }
    
    try:
        sql = plan_to_sql(complex_plan)
        print(f"‚úÖ –°–ª–æ–∂–Ω—ã–π –ø–ª–∞–Ω: {sql}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True


def test_sql_to_plan():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é SQL –≤ –ø–ª–∞–Ω"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: SQL ‚Üí –ü–ª–∞–Ω")
    
    # –ü—Ä–æ—Å—Ç–æ–π SQL
    simple_sql = "SELECT business_unit_name, inn FROM tbl_business_unit WHERE region = '–ú–æ—Å–∫–≤–∞'"
    
    try:
        plan = sql_to_plan(simple_sql)
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π SQL: {json.dumps(plan, ensure_ascii=False, indent=2)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True


def test_roundtrip():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ü–ª–∞–Ω ‚Üí SQL ‚Üí –ü–ª–∞–Ω"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–ª–∞–Ω ‚Üí SQL ‚Üí –ü–ª–∞–Ω")
    
    original_plan = {
        "tables": ["tbl_business_unit"],
        "fields": ["business_unit_name", "inn"],
        "conditions": [
            {"field": "region", "operator": "=", "value": "–ú–æ—Å–∫–≤–∞"}
        ]
    }
    
    try:
        # –ü–ª–∞–Ω ‚Üí SQL
        sql = plan_to_sql(original_plan)
        print(f"SQL: {sql}")
        
        # SQL ‚Üí –ü–ª–∞–Ω
        converted_plan = sql_to_plan(sql)
        print(f"–ü–ª–∞–Ω: {json.dumps(converted_plan, ensure_ascii=False, indent=2)}")
        
        print("‚úÖ –¶–∏–∫–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def create_example_files():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
    examples_dir = Path("examples")
    examples_dir.mkdir(exist_ok=True)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    simple_plan = {
        "question": "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã",
        "plan": {
            "tables": ["tbl_business_unit"],
            "fields": ["business_unit_name", "inn", "region"],
            "conditions": [
                {"field": "region", "operator": "=", "value": "–ú–æ—Å–∫–≤–∞"}
            ],
            "order_by": ["business_unit_name"]
        },
        "category": "–ö–ª–∏–µ–Ω—Ç—ã",
        "complexity": 2,
        "description": "–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"
    }
    
    with open(examples_dir / "simple_plan.json", "w", encoding="utf-8") as f:
        json.dump(simple_plan, f, ensure_ascii=False, indent=2)
    
    # –ü—Ä–∏–º–µ—Ä 2: –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    complex_plan = {
        "question": "–ü–æ–∫–∞–∂–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ê –±–æ–ª—å—à–µ 1 –º–ª–Ω —Ä—É–±–ª–µ–π",
        "plan": {
            "tables": ["tbl_principal_assignment", "tbl_business_unit"],
            "fields": ["pa.assignment_number", "pa.assignment_date", "pa.amount", "bu.business_unit_name"],
            "joins": [
                {"table": "tbl_business_unit", "on": "pa.business_unit_id = bu.id", "type": "JOIN"}
            ],
            "conditions": [
                {"field": "pa.assignment_date", "operator": "<", "value": "CURRENT_DATE - INTERVAL '3 days'"},
                {"field": "bu.category", "operator": "=", "value": "A"},
                {"field": "pa.amount", "operator": ">", "value": "1000000"}
            ],
            "group_by": ["bu.business_unit_name"],
            "order_by": ["pa.amount DESC"]
        },
        "category": "–°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
        "complexity": 4,
        "description": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"
    }
    
    with open(examples_dir / "complex_plan.json", "w", encoding="utf-8") as f:
        json.dump(complex_plan, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {examples_dir}")
    print("   - simple_plan.json")
    print("   - complex_plan.json")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –ø–ª–∞–Ω–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
    tests = [
        test_plan_to_sql,
        test_sql_to_plan,
        test_roundtrip
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        create_example_files()
        
        print("\nüîß –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CLI:")
        print("python src/utils/plan_sql_cli.py plan-to-sql examples/simple_plan.json")
        print("python src/utils/plan_sql_cli.py validate examples/simple_plan.json")
        print("python src/utils/plan_sql_cli.py sql-to-plan \"SELECT * FROM users\"")
        
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(1)


if __name__ == "__main__":
    main()
